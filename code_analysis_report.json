{
  "summary": {
    "total_files": 22,
    "total_functions": 258,
    "entry_points": 135,
    "orphaned_functions": 65,
    "complexity_avg": 4.271317829457364
  },
  "functions": {
    "code_analyzer.py:main": {
      "id": "code_analyzer.py:main",
      "name": "main",
      "file_path": "code_analyzer.py",
      "line_start": 341,
      "line_end": 371,
      "is_method": true,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Función principal del analizador",
      "complexity": 4,
      "calls": "{'open', 'join', 'len', 'code_analyzer.py:analyze_project', 'dump', 'print', 'CodeAnalyzer'}",
      "called_by": "set()",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:__post_init__": {
      "id": "code_analyzer.py:__post_init__",
      "name": "__post_init__",
      "file_path": "code_analyzer.py",
      "line_start": 44,
      "line_end": 50,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": null,
      "complexity": 4,
      "calls": "{'set'}",
      "called_by": "set()",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:__init__": {
      "id": "code_analyzer.py:__init__",
      "name": "__init__",
      "file_path": "code_analyzer.py",
      "line_start": 55,
      "line_end": 77,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "project_root"
      ],
      "return_type": null,
      "docstring": null,
      "complexity": 1,
      "calls": "{'Path', 'defaultdict', 'set'}",
      "called_by": "set()",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:analyze_project": {
      "id": "code_analyzer.py:analyze_project",
      "name": "analyze_project",
      "file_path": "code_analyzer.py",
      "line_start": 79,
      "line_end": 103,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Análisis completo del proyecto",
      "complexity": 2,
      "calls": "{'code_analyzer.py:_map_dependencies', 'code_analyzer.py:_analyze_file', 'code_analyzer.py:_find_orphaned_functions', 'code_analyzer.py:_identify_entry_points', 'code_analyzer.py:_generate_report', 'len', 'print', 'code_analyzer.py:_find_python_files'}",
      "called_by": "{'code_analyzer.py:main'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_find_python_files": {
      "id": "code_analyzer.py:_find_python_files",
      "name": "_find_python_files",
      "file_path": "code_analyzer.py",
      "line_start": 105,
      "line_end": 120,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Encuentra todos los archivos Python del proyecto",
      "complexity": 4,
      "calls": "{'endswith', 'Path', 'append', 'walk'}",
      "called_by": "{'code_analyzer.py:analyze_project'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_analyze_file": {
      "id": "code_analyzer.py:_analyze_file",
      "name": "_analyze_file",
      "file_path": "code_analyzer.py",
      "line_start": 122,
      "line_end": 140,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "return_type": null,
      "docstring": "Analiza un archivo Python completo",
      "complexity": 3,
      "calls": "{'open', 'read', 'str', 'print', 'parse', 'code_analyzer.py:_analyze_imports', 'add', 'code_analyzer.py:_analyze_functions'}",
      "called_by": "{'code_analyzer.py:analyze_project'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_analyze_imports": {
      "id": "code_analyzer.py:_analyze_imports",
      "name": "_analyze_imports",
      "file_path": "code_analyzer.py",
      "line_start": 142,
      "line_end": 150,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "tree",
        "file_path"
      ],
      "return_type": null,
      "docstring": "Analiza imports del archivo",
      "complexity": 6,
      "calls": "{'isinstance', 'str', 'walk', 'add'}",
      "called_by": "{'code_analyzer.py:_analyze_file'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_analyze_functions": {
      "id": "code_analyzer.py:_analyze_functions",
      "name": "_analyze_functions",
      "file_path": "code_analyzer.py",
      "line_start": 152,
      "line_end": 183,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "tree",
        "file_path",
        "content"
      ],
      "return_type": null,
      "docstring": "Analiza todas las funciones del archivo",
      "complexity": 6,
      "calls": "{'str', 'walk', 'any', 'isinstance', 'get_docstring', 'code_analyzer.py:_calculate_complexity', 'code_analyzer.py:_find_function_calls', 'split', 'code_analyzer.py:_is_exported', 'hasattr', 'code_analyzer.py:_is_entry_point', 'FunctionInfo'}",
      "called_by": "{'code_analyzer.py:_analyze_file'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_calculate_complexity": {
      "id": "code_analyzer.py:_calculate_complexity",
      "name": "_calculate_complexity",
      "file_path": "code_analyzer.py",
      "line_start": 185,
      "line_end": 196,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "return_type": null,
      "docstring": "Calcula complejidad ciclomática de la función",
      "complexity": 4,
      "calls": "{'len', 'walk', 'isinstance'}",
      "called_by": "{'code_analyzer.py:_analyze_functions'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_is_entry_point": {
      "id": "code_analyzer.py:_is_entry_point",
      "name": "_is_entry_point",
      "file_path": "code_analyzer.py",
      "line_start": 198,
      "line_end": 211,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "content"
      ],
      "return_type": null,
      "docstring": "Detecta si la función es un punto de entrada",
      "complexity": 4,
      "calls": "{'search'}",
      "called_by": "{'code_analyzer.py:_analyze_functions'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_is_exported": {
      "id": "code_analyzer.py:_is_exported",
      "name": "_is_exported",
      "file_path": "code_analyzer.py",
      "line_start": 213,
      "line_end": 227,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "content"
      ],
      "return_type": null,
      "docstring": "Detecta si la función es exportada públicamente",
      "complexity": 5,
      "calls": "{'group', 'search'}",
      "called_by": "{'code_analyzer.py:_analyze_functions'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_find_function_calls": {
      "id": "code_analyzer.py:_find_function_calls",
      "name": "_find_function_calls",
      "file_path": "code_analyzer.py",
      "line_start": 229,
      "line_end": 241,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "return_type": null,
      "docstring": "Encuentra todas las llamadas a funciones dentro del nodo",
      "complexity": 5,
      "calls": "{'set', 'isinstance', 'walk', 'add'}",
      "called_by": "{'code_analyzer.py:_analyze_functions'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_map_dependencies": {
      "id": "code_analyzer.py:_map_dependencies",
      "name": "_map_dependencies",
      "file_path": "code_analyzer.py",
      "line_start": 243,
      "line_end": 257,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Mapea dependencias entre funciones",
      "complexity": 4,
      "calls": "{'code_analyzer.py:_find_function_by_name', 'items', 'copy', 'print', 'remove', 'add'}",
      "called_by": "{'code_analyzer.py:analyze_project'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_find_function_by_name": {
      "id": "code_analyzer.py:_find_function_by_name",
      "name": "_find_function_by_name",
      "file_path": "code_analyzer.py",
      "line_start": 259,
      "line_end": 268,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "name",
        "current_file"
      ],
      "return_type": null,
      "docstring": "Busca una función por nombre en el archivo actual y imports",
      "complexity": 4,
      "calls": "{'items'}",
      "called_by": "{'code_analyzer.py:_map_dependencies'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_identify_entry_points": {
      "id": "code_analyzer.py:_identify_entry_points",
      "name": "_identify_entry_points",
      "file_path": "code_analyzer.py",
      "line_start": 270,
      "line_end": 274,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Identifica puntos de entrada del sistema",
      "complexity": 3,
      "calls": "{'items', 'add'}",
      "called_by": "{'code_analyzer.py:analyze_project'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_find_orphaned_functions": {
      "id": "code_analyzer.py:_find_orphaned_functions",
      "name": "_find_orphaned_functions",
      "file_path": "code_analyzer.py",
      "line_start": 276,
      "line_end": 290,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Encuentra funciones huérfanas (no llamadas nunca)",
      "complexity": 5,
      "calls": "{'items', 'append', 'len'}",
      "called_by": "{'code_analyzer.py:analyze_project'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_generate_report": {
      "id": "code_analyzer.py:_generate_report",
      "name": "_generate_report",
      "file_path": "code_analyzer.py",
      "line_start": 292,
      "line_end": 308,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "orphaned_functions"
      ],
      "return_type": null,
      "docstring": "Genera reporte completo del análisis",
      "complexity": 1,
      "calls": "{'sum', 'items', 'values', 'list', 'asdict', 'len', 'code_analyzer.py:_generate_cleanup_suggestions'}",
      "called_by": "{'code_analyzer.py:analyze_project'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "code_analyzer.py:_generate_cleanup_suggestions": {
      "id": "code_analyzer.py:_generate_cleanup_suggestions",
      "name": "_generate_cleanup_suggestions",
      "file_path": "code_analyzer.py",
      "line_start": 310,
      "line_end": 339,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "orphaned_functions"
      ],
      "return_type": null,
      "docstring": "Genera sugerencias de limpieza",
      "complexity": 3,
      "calls": "{'len', 'append', 'list'}",
      "called_by": "{'code_analyzer.py:_generate_report'}",
      "is_exported": true,
      "is_entry_point": true
    },
    "COMAU.py:get_comau_manager": {
      "id": "COMAU.py:get_comau_manager",
      "name": "get_comau_manager",
      "file_path": "COMAU.py",
      "line_start": 422,
      "line_end": 439,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "mqtt_manager"
      ],
      "return_type": null,
      "docstring": "Obtiene la instancia global del gestor COMAU (patrón singleton).\n\nArgs:\n    mqtt_manager: Instancia del gestor MQTT (opcional)\n    \nReturns:\n    Instancia del gestor COMAU",
      "complexity": 4,
      "calls": "{'COMAUManager'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:__init__": {
      "id": "COMAU.py:__init__",
      "name": "__init__",
      "file_path": "COMAU.py",
      "line_start": 75,
      "line_end": 94,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "mqtt_manager"
      ],
      "return_type": null,
      "docstring": "Inicializa el gestor COMAU.\n\nArgs:\n    mqtt_manager: Instancia del gestor MQTT para enviar comandos",
      "complexity": 1,
      "calls": "{'info', 'getLogger', 'COMAU.py:_load_predefined_routines'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:_load_predefined_routines": {
      "id": "COMAU.py:_load_predefined_routines",
      "name": "_load_predefined_routines",
      "file_path": "COMAU.py",
      "line_start": 96,
      "line_end": 105,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Carga rutinas predefinidas del robot",
      "complexity": 1,
      "calls": "{'COMAU.py:_get_clear_errors_sequence', 'COMAU.py:_get_set_fmi_zero_sequence', 'COMAU.py:_get_stop_program_sequence', 'COMAU.py:_get_move_to_home_sequence', 'COMAU.py:_get_reset_robot_sequence', 'COMAU.py:_get_start_program_sequence'}",
      "called_by": "{'COMAU.py:__init__'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:_get_reset_robot_sequence": {
      "id": "COMAU.py:_get_reset_robot_sequence",
      "name": "_get_reset_robot_sequence",
      "file_path": "COMAU.py",
      "line_start": 107,
      "line_end": 134,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Secuencia para resetear el robot",
      "complexity": 1,
      "calls": "set()",
      "called_by": "{'COMAU.py:_load_predefined_routines'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:_get_move_to_home_sequence": {
      "id": "COMAU.py:_get_move_to_home_sequence",
      "name": "_get_move_to_home_sequence",
      "file_path": "COMAU.py",
      "line_start": 136,
      "line_end": 151,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Secuencia para mover el robot a posición home",
      "complexity": 1,
      "calls": "set()",
      "called_by": "{'COMAU.py:_load_predefined_routines'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:_get_clear_errors_sequence": {
      "id": "COMAU.py:_get_clear_errors_sequence",
      "name": "_get_clear_errors_sequence",
      "file_path": "COMAU.py",
      "line_start": 153,
      "line_end": 168,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Secuencia para limpiar errores del robot",
      "complexity": 1,
      "calls": "set()",
      "called_by": "{'COMAU.py:_load_predefined_routines'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:_get_start_program_sequence": {
      "id": "COMAU.py:_get_start_program_sequence",
      "name": "_get_start_program_sequence",
      "file_path": "COMAU.py",
      "line_start": 170,
      "line_end": 179,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Secuencia para iniciar programa",
      "complexity": 1,
      "calls": "set()",
      "called_by": "{'COMAU.py:_load_predefined_routines'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:_get_stop_program_sequence": {
      "id": "COMAU.py:_get_stop_program_sequence",
      "name": "_get_stop_program_sequence",
      "file_path": "COMAU.py",
      "line_start": 181,
      "line_end": 190,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Secuencia para detener programa",
      "complexity": 1,
      "calls": "set()",
      "called_by": "{'COMAU.py:_load_predefined_routines'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:_get_set_fmi_zero_sequence": {
      "id": "COMAU.py:_get_set_fmi_zero_sequence",
      "name": "_get_set_fmi_zero_sequence",
      "file_path": "COMAU.py",
      "line_start": 192,
      "line_end": 207,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Secuencia para establecer FMI en cero",
      "complexity": 1,
      "calls": "set()",
      "called_by": "{'COMAU.py:_load_predefined_routines'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:verify_instr": {
      "id": "COMAU.py:verify_instr",
      "name": "verify_instr",
      "file_path": "COMAU.py",
      "line_start": 209,
      "line_end": 251,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "timeout"
      ],
      "return_type": null,
      "docstring": "Verifica si el string \"Instr:\" existe en el bloque Drive.\n\nArgs:\n    timeout: Tiempo máximo de espera en segundos\n    \nReturns:\n    Diccionario con el resultado de la verificación",
      "complexity": 4,
      "calls": "{'int', 'info', 'time', 'get', 'now', 'isoformat', 'send_command_and_wait'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:execute_key_sequence_with_instr_check": {
      "id": "COMAU.py:execute_key_sequence_with_instr_check",
      "name": "execute_key_sequence_with_instr_check",
      "file_path": "COMAU.py",
      "line_start": 253,
      "line_end": 317,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "sequence",
        "timeout",
        "instr_timeout"
      ],
      "return_type": null,
      "docstring": "Ejecuta una secuencia de teclas solo si \"Instr:\" existe en memoria.\n\nArgs:\n    sequence: Lista de acciones a ejecutar\n    timeout: Tiempo máximo de espera para la secuencia\n    instr_timeout: Tiempo máximo para verificar Instr\n    \nReturns:\n    Diccionario con el resultado de la ejecución",
      "complexity": 4,
      "calls": "{'int', 'info', 'time', 'get', 'now', 'isoformat', 'send_command_and_wait'}",
      "called_by": "{'COMAU.py:execute_routine'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:execute_routine": {
      "id": "COMAU.py:execute_routine",
      "name": "execute_routine",
      "file_path": "COMAU.py",
      "line_start": 319,
      "line_end": 340,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "routine_name",
        "timeout"
      ],
      "return_type": null,
      "docstring": "Ejecuta una rutina predefinida.\n\nArgs:\n    routine_name: Nombre de la rutina a ejecutar\n    timeout: Tiempo máximo de espera\n    \nReturns:\n    Diccionario con el resultado de la ejecución",
      "complexity": 2,
      "calls": "{'info', 'list', 'COMAU.py:execute_key_sequence_with_instr_check', 'keys'}",
      "called_by": "{'COMAU.py:stop_program', 'COMAU.py:set_fmi_zero', 'COMAU.py:move_to_home', 'COMAU.py:start_program', 'COMAU.py:reset_robot', 'COMAU.py:clear_errors'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:reset_robot": {
      "id": "COMAU.py:reset_robot",
      "name": "reset_robot",
      "file_path": "COMAU.py",
      "line_start": 342,
      "line_end": 344,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "timeout"
      ],
      "return_type": null,
      "docstring": "Resetea el robot usando la rutina predefinida",
      "complexity": 1,
      "calls": "{'COMAU.py:execute_routine'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:move_to_home": {
      "id": "COMAU.py:move_to_home",
      "name": "move_to_home",
      "file_path": "COMAU.py",
      "line_start": 346,
      "line_end": 348,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "timeout"
      ],
      "return_type": null,
      "docstring": "Mueve el robot a posición home",
      "complexity": 1,
      "calls": "{'COMAU.py:execute_routine'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:clear_errors": {
      "id": "COMAU.py:clear_errors",
      "name": "clear_errors",
      "file_path": "COMAU.py",
      "line_start": 350,
      "line_end": 352,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "timeout"
      ],
      "return_type": null,
      "docstring": "Limpia errores del robot",
      "complexity": 1,
      "calls": "{'COMAU.py:execute_routine'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:start_program": {
      "id": "COMAU.py:start_program",
      "name": "start_program",
      "file_path": "COMAU.py",
      "line_start": 354,
      "line_end": 356,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "timeout"
      ],
      "return_type": null,
      "docstring": "Inicia un programa en el robot",
      "complexity": 1,
      "calls": "{'COMAU.py:execute_routine'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:stop_program": {
      "id": "COMAU.py:stop_program",
      "name": "stop_program",
      "file_path": "COMAU.py",
      "line_start": 358,
      "line_end": 360,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "timeout"
      ],
      "return_type": null,
      "docstring": "Detiene el programa actual del robot",
      "complexity": 1,
      "calls": "{'COMAU.py:execute_routine'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:set_fmi_zero": {
      "id": "COMAU.py:set_fmi_zero",
      "name": "set_fmi_zero",
      "file_path": "COMAU.py",
      "line_start": 362,
      "line_end": 364,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "timeout"
      ],
      "return_type": null,
      "docstring": "Establece FMI en cero",
      "complexity": 1,
      "calls": "{'COMAU.py:execute_routine'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:get_available_routines": {
      "id": "COMAU.py:get_available_routines",
      "name": "get_available_routines",
      "file_path": "COMAU.py",
      "line_start": 366,
      "line_end": 368,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Retorna lista de rutinas disponibles",
      "complexity": 1,
      "calls": "{'list', 'keys'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:add_custom_routine": {
      "id": "COMAU.py:add_custom_routine",
      "name": "add_custom_routine",
      "file_path": "COMAU.py",
      "line_start": 370,
      "line_end": 379,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "name",
        "sequence"
      ],
      "return_type": null,
      "docstring": "Agrega una rutina personalizada.\n\nArgs:\n    name: Nombre de la rutina\n    sequence: Lista de acciones de la rutina",
      "complexity": 1,
      "calls": "{'info'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU.py:validate_sequence": {
      "id": "COMAU.py:validate_sequence",
      "name": "validate_sequence",
      "file_path": "COMAU.py",
      "line_start": 381,
      "line_end": 415,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "sequence"
      ],
      "return_type": null,
      "docstring": "Valida que una secuencia de teclas sea correcta.\n\nArgs:\n    sequence: Lista de acciones a validar\n    \nReturns:\n    Tupla con (es_valida, mensaje_error)",
      "complexity": 11,
      "calls": "{'enumerate', 'isinstance'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:get_variable_registry": {
      "id": "COMAU_variables.py:get_variable_registry",
      "name": "get_variable_registry",
      "file_path": "COMAU_variables.py",
      "line_start": 549,
      "line_end": 551,
      "is_method": true,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Obtiene la instancia global del registro de variables",
      "complexity": 1,
      "calls": "set()",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:get_variable_commands": {
      "id": "COMAU_variables.py:get_variable_commands",
      "name": "get_variable_commands",
      "file_path": "COMAU_variables.py",
      "line_start": 554,
      "line_end": 556,
      "is_method": true,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Obtiene la instancia global de comandos de variables",
      "complexity": 1,
      "calls": "set()",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:__init__": {
      "id": "COMAU_variables.py:__init__",
      "name": "__init__",
      "file_path": "COMAU_variables.py",
      "line_start": 173,
      "line_end": 174,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "registry"
      ],
      "return_type": null,
      "docstring": null,
      "complexity": 1,
      "calls": "set()",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:__str__": {
      "id": "COMAU_variables.py:__str__",
      "name": "__str__",
      "file_path": "COMAU_variables.py",
      "line_start": 37,
      "line_end": 38,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": null,
      "complexity": 1,
      "calls": "set()",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:get_command_string": {
      "id": "COMAU_variables.py:get_command_string",
      "name": "get_command_string",
      "file_path": "COMAU_variables.py",
      "line_start": 150,
      "line_end": 152,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "index",
        "value"
      ],
      "return_type": null,
      "docstring": "Retorna el comando string para establecer el valor de una variable",
      "complexity": 1,
      "calls": "set()",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:validate_value": {
      "id": "COMAU_variables.py:validate_value",
      "name": "validate_value",
      "file_path": "COMAU_variables.py",
      "line_start": 44,
      "line_end": 48,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "value"
      ],
      "return_type": null,
      "docstring": "Valida si un valor es válido para esta variable",
      "complexity": 2,
      "calls": "set()",
      "called_by": "{'COMAU_variables.py:validate_variable_value'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:_register_system_variables": {
      "id": "COMAU_variables.py:_register_system_variables",
      "name": "_register_system_variables",
      "file_path": "COMAU_variables.py",
      "line_start": 59,
      "line_end": 132,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Registra los índices de variables del sistema",
      "complexity": 1,
      "calls": "{'COMAU_variables.py:register_variable', 'COMAUVariableIndex'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:register_variable": {
      "id": "COMAU_variables.py:register_variable",
      "name": "register_variable",
      "file_path": "COMAU_variables.py",
      "line_start": 134,
      "line_end": 137,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "variable"
      ],
      "return_type": null,
      "docstring": "Registra un nuevo índice de variable",
      "complexity": 1,
      "calls": "set()",
      "called_by": "{'COMAU_variables.py:_register_system_variables'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:get_variable": {
      "id": "COMAU_variables.py:get_variable",
      "name": "get_variable",
      "file_path": "COMAU_variables.py",
      "line_start": 139,
      "line_end": 141,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "index"
      ],
      "return_type": null,
      "docstring": "Obtiene una variable por su índice",
      "complexity": 1,
      "calls": "{'get'}",
      "called_by": "{'COMAU_variables.py:validate_variable_value', 'COMAU_variables.py:create_set_variable_sequence'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:get_variable_by_name": {
      "id": "COMAU_variables.py:get_variable_by_name",
      "name": "get_variable_by_name",
      "file_path": "COMAU_variables.py",
      "line_start": 143,
      "line_end": 148,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "name"
      ],
      "return_type": null,
      "docstring": "Obtiene una variable por su nombre",
      "complexity": 2,
      "calls": "{'get'}",
      "called_by": "{'COMAU_variables.py:create_set_multiple_variables_sequence'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:get_all_variables": {
      "id": "COMAU_variables.py:get_all_variables",
      "name": "get_all_variables",
      "file_path": "COMAU_variables.py",
      "line_start": 154,
      "line_end": 156,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Retorna todas las variables registradas",
      "complexity": 1,
      "calls": "{'copy'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:get_variables_by_type": {
      "id": "COMAU_variables.py:get_variables_by_type",
      "name": "get_variables_by_type",
      "file_path": "COMAU_variables.py",
      "line_start": 158,
      "line_end": 160,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "var_type"
      ],
      "return_type": null,
      "docstring": "Retorna variables filtradas por tipo",
      "complexity": 1,
      "calls": "{'items'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:validate_variable_value": {
      "id": "COMAU_variables.py:validate_variable_value",
      "name": "validate_variable_value",
      "file_path": "COMAU_variables.py",
      "line_start": 162,
      "line_end": 167,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "index",
        "value"
      ],
      "return_type": null,
      "docstring": "Valida si un valor es válido para una variable específica",
      "complexity": 2,
      "calls": "{'COMAU_variables.py:validate_value', 'COMAU_variables.py:get_variable'}",
      "called_by": "{'COMAU_variables.py:create_word_command'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:create_word_command": {
      "id": "COMAU_variables.py:create_word_command",
      "name": "create_word_command",
      "file_path": "COMAU_variables.py",
      "line_start": 176,
      "line_end": 190,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "index",
        "value"
      ],
      "return_type": null,
      "docstring": "Crea un comando $WORD[i] para establecer el valor de una variable.\n\nArgs:\n    index: Índice de la variable\n    value: Valor a establecer\n    \nReturns:\n    String del comando $WORD[i]:=value",
      "complexity": 2,
      "calls": "{'ValueError', 'COMAU_variables.py:validate_variable_value'}",
      "called_by": "{'COMAU_variables.py:create_set_variable_sequence'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:create_set_variable_sequence": {
      "id": "COMAU_variables.py:create_set_variable_sequence",
      "name": "create_set_variable_sequence",
      "file_path": "COMAU_variables.py",
      "line_start": 192,
      "line_end": 232,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "index",
        "value"
      ],
      "return_type": null,
      "docstring": "Crea una secuencia de comandos para establecer el valor de una variable.\nSecuencia: escribir \"$WORD[i]:=valor\" + 3 ENTER\n\nArgs:\n    index: Índice de la variable\n    value: Valor a establecer\n    \nReturns:\n    Lista con la secuencia de comandos",
      "complexity": 1,
      "calls": "{'COMAU_variables.py:create_word_command', 'COMAU_variables.py:get_variable'}",
      "called_by": "{'COMAU_variables.py:create_hello_command_sequence', 'COMAU_variables.py:create_test_routine_sequence', 'COMAU_variables.py:create_command_with_sequence_and_params', 'COMAU_variables.py:create_move_to_home_sequence', 'COMAU_variables.py:create_control_execution_sequence', 'COMAU_variables.py:create_set_multiple_variables_sequence', 'COMAU_variables.py:create_execute_robot_command_sequence', 'COMAU_variables.py:create_command_with_sequence', 'COMAU_variables.py:create_execute_command_sequence'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:create_execute_command_sequence": {
      "id": "COMAU_variables.py:create_execute_command_sequence",
      "name": "create_execute_command_sequence",
      "file_path": "COMAU_variables.py",
      "line_start": 234,
      "line_end": 266,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "command_id",
        "parameters"
      ],
      "return_type": null,
      "docstring": "Crea una secuencia de comandos para ejecutar una acción.\n\nArgs:\n    command_id: ID del comando a ejecutar\n    parameters: Diccionario con parámetros {dX: valor, dY: valor, ...}\n    \nReturns:\n    Lista de comandos para ejecutar",
      "complexity": 4,
      "calls": "{'items', 'COMAU_variables.py:create_set_variable_sequence', 'extend'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:create_control_execution_sequence": {
      "id": "COMAU_variables.py:create_control_execution_sequence",
      "name": "create_control_execution_sequence",
      "file_path": "COMAU_variables.py",
      "line_start": 268,
      "line_end": 278,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "control_value"
      ],
      "return_type": null,
      "docstring": "Crea una secuencia para controlar la ejecución.\n\nArgs:\n    control_value: Valor de control (0=deshabilitado, 1=iniciar, 2=reanudar, 3=ejecutándose)\n    \nReturns:\n    Lista de comandos para ejecutar",
      "complexity": 1,
      "calls": "{'COMAU_variables.py:create_set_variable_sequence'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:create_move_to_home_sequence": {
      "id": "COMAU_variables.py:create_move_to_home_sequence",
      "name": "create_move_to_home_sequence",
      "file_path": "COMAU_variables.py",
      "line_start": 280,
      "line_end": 302,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "sequence_id"
      ],
      "return_type": null,
      "docstring": "Crea una secuencia para mover el robot a HOME.\n\nArgs:\n    sequence_id: ID único de secuencia (opcional, se genera automáticamente si no se proporciona)\n    \nReturns:\n    Tupla con (lista de comandos, ID de secuencia)",
      "complexity": 2,
      "calls": "{'COMAU_variables.py:generate_sequence_id', 'COMAU_variables.py:create_set_variable_sequence', 'extend'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:create_test_routine_sequence": {
      "id": "COMAU_variables.py:create_test_routine_sequence",
      "name": "create_test_routine_sequence",
      "file_path": "COMAU_variables.py",
      "line_start": 304,
      "line_end": 326,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "sequence_id"
      ],
      "return_type": null,
      "docstring": "Crea una secuencia para ejecutar la rutina de prueba.\n\nArgs:\n    sequence_id: ID único de secuencia (opcional, se genera automáticamente si no se proporciona)\n    \nReturns:\n    Tupla con (lista de comandos, ID de secuencia)",
      "complexity": 2,
      "calls": "{'COMAU_variables.py:generate_sequence_id', 'COMAU_variables.py:create_set_variable_sequence', 'extend'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:create_set_multiple_variables_sequence": {
      "id": "COMAU_variables.py:create_set_multiple_variables_sequence",
      "name": "create_set_multiple_variables_sequence",
      "file_path": "COMAU_variables.py",
      "line_start": 328,
      "line_end": 357,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "variables"
      ],
      "return_type": null,
      "docstring": "Crea una secuencia para establecer múltiples variables en una sola ejecución.\n\nArgs:\n    variables: Diccionario con {índice: valor} o {nombre_variable: valor}\n    \nReturns:\n    Lista con la secuencia completa de comandos",
      "complexity": 5,
      "calls": "{'items', 'COMAU_variables.py:create_set_variable_sequence', 'extend', 'isinstance', 'COMAU_variables.py:get_variable_by_name', 'ValueError'}",
      "called_by": "{'COMAU_variables.py:create_set_coordinates_sequence'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:create_set_coordinates_sequence": {
      "id": "COMAU_variables.py:create_set_coordinates_sequence",
      "name": "create_set_coordinates_sequence",
      "file_path": "COMAU_variables.py",
      "line_start": 359,
      "line_end": 385,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "x",
        "y",
        "z",
        "a",
        "e",
        "r"
      ],
      "return_type": null,
      "docstring": "Crea una secuencia para establecer coordenadas del robot.\n\nArgs:\n    x, y, z, a, e, r: Valores de coordenadas (opcionales)\n    \nReturns:\n    Lista con la secuencia de comandos",
      "complexity": 7,
      "calls": "{'COMAU_variables.py:create_set_multiple_variables_sequence'}",
      "called_by": "{'COMAU_variables.py:create_execute_robot_command_sequence', 'COMAU_variables.py:create_command_with_sequence_and_params'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:create_execute_robot_command_sequence": {
      "id": "COMAU_variables.py:create_execute_robot_command_sequence",
      "name": "create_execute_robot_command_sequence",
      "file_path": "COMAU_variables.py",
      "line_start": 387,
      "line_end": 412,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "command_id",
        "x",
        "y",
        "z",
        "a",
        "e",
        "r"
      ],
      "return_type": null,
      "docstring": "Crea una secuencia completa para ejecutar un comando del robot con coordenadas.\n\nArgs:\n    command_id: ID del comando a ejecutar\n    x, y, z, a, e, r: Valores de coordenadas (opcionales)\n    \nReturns:\n    Lista con la secuencia completa de comandos",
      "complexity": 2,
      "calls": "{'COMAU_variables.py:create_set_coordinates_sequence', 'COMAU_variables.py:create_set_variable_sequence', 'extend', 'any'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:create_command_with_sequence": {
      "id": "COMAU_variables.py:create_command_with_sequence",
      "name": "create_command_with_sequence",
      "file_path": "COMAU_variables.py",
      "line_start": 414,
      "line_end": 441,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "command_variable_index",
        "command_value",
        "sequence_id"
      ],
      "return_type": null,
      "docstring": "Crea una secuencia para ejecutar un comando con ID de secuencia para identificar la respuesta.\n\nArgs:\n    command_variable_index: Índice de la variable que activa el comando (ej: 87)\n    command_value: Valor que activa el comando (ej: 1)\n    sequence_id: ID único de secuencia (opcional, se genera automáticamente si no se proporciona)\n    \nReturns:\n    Lista con la secuencia de comandos",
      "complexity": 2,
      "calls": "{'int', 'time', 'COMAU_variables.py:create_set_variable_sequence', 'extend'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:create_command_with_sequence_and_params": {
      "id": "COMAU_variables.py:create_command_with_sequence_and_params",
      "name": "create_command_with_sequence_and_params",
      "file_path": "COMAU_variables.py",
      "line_start": 443,
      "line_end": 477,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "command_variable_index",
        "command_value",
        "sequence_id",
        "x",
        "y",
        "z",
        "a",
        "e",
        "r"
      ],
      "return_type": null,
      "docstring": "Crea una secuencia completa para ejecutar un comando con parámetros y ID de secuencia.\n\nArgs:\n    command_variable_index: Índice de la variable que activa el comando\n    command_value: Valor que activa el comando\n    sequence_id: ID único de secuencia (opcional)\n    x, y, z, a, e, r: Parámetros de coordenadas (opcionales)\n    \nReturns:\n    Lista con la secuencia completa de comandos",
      "complexity": 3,
      "calls": "{'COMAU_variables.py:create_set_coordinates_sequence', 'int', 'any', 'COMAU_variables.py:create_set_variable_sequence', 'extend', 'time'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:generate_sequence_id": {
      "id": "COMAU_variables.py:generate_sequence_id",
      "name": "generate_sequence_id",
      "file_path": "COMAU_variables.py",
      "line_start": 479,
      "line_end": 517,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Genera un ID único de secuencia entre 0-9999.\nEvita repeticiones en las últimas 20 ejecuciones.\n\nReturns:\n    ID único de secuencia",
      "complexity": 6,
      "calls": "{'int', 'randint', 'range', 'len', 'pop', 'time', 'hasattr', 'append'}",
      "called_by": "{'COMAU_variables.py:create_move_to_home_sequence', 'COMAU_variables.py:create_hello_command_sequence', 'COMAU_variables.py:create_test_routine_sequence'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "COMAU_variables.py:create_hello_command_sequence": {
      "id": "COMAU_variables.py:create_hello_command_sequence",
      "name": "create_hello_command_sequence",
      "file_path": "COMAU_variables.py",
      "line_start": 519,
      "line_end": 541,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "sequence_id"
      ],
      "return_type": null,
      "docstring": "Crea una secuencia para enviar el comando de prueba HOLA.\n\nArgs:\n    sequence_id: ID único de secuencia (opcional, se genera automáticamente si no se proporciona)\n    \nReturns:\n    Tupla con (lista de comandos, ID de secuencia)",
      "complexity": 2,
      "calls": "{'COMAU_variables.py:generate_sequence_id', 'COMAU_variables.py:create_set_variable_sequence', 'extend'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "contornos_analyzer.py:calcular_angulo_orientacion": {
      "id": "contornos_analyzer.py:calcular_angulo_orientacion",
      "name": "calcular_angulo_orientacion",
      "file_path": "contornos_analyzer.py",
      "line_start": 22,
      "line_end": 36,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "moments"
      ],
      "return_type": null,
      "docstring": "Calcula el ángulo de orientación principal de la forma",
      "complexity": 3,
      "calls": "{'atan2', 'degrees'}",
      "called_by": "{'contornos_analyzer.py:analizar_imagen_completa'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "contornos_analyzer.py:pixeles_a_mm": {
      "id": "contornos_analyzer.py:pixeles_a_mm",
      "name": "pixeles_a_mm",
      "file_path": "contornos_analyzer.py",
      "line_start": 39,
      "line_end": 41,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "pixeles",
        "mm_por_pixel"
      ],
      "return_type": null,
      "docstring": "Convierte una medida lineal de píxeles a milímetros (precisión 0.1mm)",
      "complexity": 1,
      "calls": "{'round'}",
      "called_by": "{'contornos_analyzer.py:analizar_imagen_completa', 'contornos_analyzer.py:analizar_agujeros'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "contornos_analyzer.py:pixeles2_a_mm2": {
      "id": "contornos_analyzer.py:pixeles2_a_mm2",
      "name": "pixeles2_a_mm2",
      "file_path": "contornos_analyzer.py",
      "line_start": 44,
      "line_end": 46,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "pixeles_cuadrados",
        "mm_por_pixel"
      ],
      "return_type": null,
      "docstring": "Convierte un área de píxeles² a milímetros² (precisión 0.1mm²)",
      "complexity": 1,
      "calls": "{'round'}",
      "called_by": "{'contornos_analyzer.py:analizar_imagen_completa', 'contornos_analyzer.py:analizar_agujeros'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "contornos_analyzer.py:calcular_centroide": {
      "id": "contornos_analyzer.py:calcular_centroide",
      "name": "calcular_centroide",
      "file_path": "contornos_analyzer.py",
      "line_start": 49,
      "line_end": 56,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "contour"
      ],
      "return_type": null,
      "docstring": "Calcula el centroide de un contorno",
      "complexity": 2,
      "calls": "{'int', 'moments'}",
      "called_by": "{'contornos_analyzer.py:analizar_agujeros'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "contornos_analyzer.py:analizar_agujeros": {
      "id": "contornos_analyzer.py:analizar_agujeros",
      "name": "analizar_agujeros",
      "file_path": "contornos_analyzer.py",
      "line_start": 59,
      "line_end": 139,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "holes",
        "mm_por_pixel"
      ],
      "return_type": null,
      "docstring": "Analiza todos los agujeros y los clasifica según circularidad y área",
      "complexity": 15,
      "calls": "{'min', 'contornos_analyzer.py:calcular_centroide', 'max', 'enumerate', 'arcLength', 'fitEllipse', 'contornos_analyzer.py:pixeles_a_mm', 'contourArea', 'len', 'append', 'contornos_analyzer.py:pixeles2_a_mm2'}",
      "called_by": "{'contornos_analyzer.py:analizar_imagen_completa'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "contornos_analyzer.py:encontrar_agujeros_extremos": {
      "id": "contornos_analyzer.py:encontrar_agujeros_extremos",
      "name": "encontrar_agujeros_extremos",
      "file_path": "contornos_analyzer.py",
      "line_start": 142,
      "line_end": 181,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "analisis_agujeros"
      ],
      "return_type": null,
      "docstring": "Encuentra los dos agujeros grandes más extremos",
      "complexity": 8,
      "calls": "{'range', 'sqrt', 'append', 'len'}",
      "called_by": "{'contornos_analyzer.py:analizar_imagen_completa'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "contornos_analyzer.py:analizar_imagen_completa": {
      "id": "contornos_analyzer.py:analizar_imagen_completa",
      "name": "analizar_imagen_completa",
      "file_path": "contornos_analyzer.py",
      "line_start": 184,
      "line_end": 439,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "img_fondo_blanco",
        "mm_por_pixel",
        "verbose"
      ],
      "return_type": null,
      "docstring": "Analiza una imagen de junta completa (fondo blanco)\n\nArgs:\n    img_fondo_blanco: Imagen en escala de grises con fondo blanco\n    mm_por_pixel: Factor de conversión píxeles a milímetros\n\nReturns:\n    Diccionario con todos los datos del análisis",
      "complexity": 59,
      "calls": "{'str', 'print_exc', 'sqrt', 'HuMoments', 'arcLength', 'contornos_analyzer.py:pixeles_a_mm', 'flatten', 'len', 'boundingRect', 'findContours', 'contornos_analyzer.py:encontrar_agujeros_extremos', 'moments', 'contourArea', 'threshold', 'print', 'append', 'contornos_analyzer.py:calcular_angulo_orientacion', 'contornos_analyzer.py:pixeles2_a_mm2', 'sum', 'enumerate', 'fillPoly', 'contornos_analyzer.py:analizar_agujeros', 'zeros', 'float'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "contornos_analyzer.py:crear_visualizacion": {
      "id": "contornos_analyzer.py:crear_visualizacion",
      "name": "crear_visualizacion",
      "file_path": "contornos_analyzer.py",
      "line_start": 442,
      "line_end": 512,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "img_fondo_blanco",
        "datos_analisis"
      ],
      "return_type": null,
      "docstring": "Crea la visualización con contornos y agujeros coloreados\n\nArgs:\n    img_fondo_blanco: Imagen original en escala de grises con fondo blanco\n    datos_analisis: Resultado del análisis completo\n\nReturns:\n    Imagen BGR con visualización o None si hay error",
      "complexity": 10,
      "calls": "{'int', 'full', 'line', 'drawContours', 'circle', 'fillPoly', 'tuple', 'get', 'cvtColor', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "elementos_utils.py:calcular_centros_muescas": {
      "id": "elementos_utils.py:calcular_centros_muescas",
      "name": "calcular_centros_muescas",
      "file_path": "elementos_utils.py",
      "line_start": 16,
      "line_end": 47,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "cantidad",
        "primera_x_mm",
        "primera_y_mm",
        "vertical"
      ],
      "return_type": null,
      "docstring": "Calcula los centros de todas las muescas en mm (relativas al punto medio)\n\nArgs:\n    cantidad: Número de muescas\n    primera_x_mm: Coordenada X de la primera muesca\n    primera_y_mm: Coordenada Y de la primera muesca\n    vertical: True para orientación vertical\n\nReturns:\n    Lista de diccionarios: [{'id': 1, 'centro_mm': [x, y]}, ...]",
      "complexity": 4,
      "calls": "{'range', 'append', 'round'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "elementos_utils.py:extraer_datos_elementos_form": {
      "id": "elementos_utils.py:extraer_datos_elementos_form",
      "name": "extraer_datos_elementos_form",
      "file_path": "elementos_utils.py",
      "line_start": 50,
      "line_end": 96,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "request_form"
      ],
      "return_type": null,
      "docstring": "Extrae todos los datos de elementos (muescas, illinois, codigo, lote) del FormData\n\nArgs:\n    request_form: request.form de Flask\n\nReturns:\n    Diccionario con todos los datos extraídos y parseados",
      "complexity": 6,
      "calls": "{'int', 'str', 'elementos_utils.py:parse_bool', 'strip', 'elementos_utils.py:parse_float', 'elementos_utils.py:parse_int', 'get', 'float'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "elementos_utils.py:extraer_datos_elementos_json": {
      "id": "elementos_utils.py:extraer_datos_elementos_json",
      "name": "extraer_datos_elementos_json",
      "file_path": "elementos_utils.py",
      "line_start": 99,
      "line_end": 133,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "request_json",
        "junta_fallback"
      ],
      "return_type": null,
      "docstring": "Extrae datos de elementos desde JSON (POST) con fallback a junta guardada\n\nArgs:\n    request_json: request.get_json() de Flask\n    junta_fallback: Diccionario de la junta guardada (para valores default)\n\nReturns:\n    Diccionario con todos los datos",
      "complexity": 1,
      "calls": "{'get'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "elementos_utils.py:obtener_primera_muesca_desde_centros": {
      "id": "elementos_utils.py:obtener_primera_muesca_desde_centros",
      "name": "obtener_primera_muesca_desde_centros",
      "file_path": "elementos_utils.py",
      "line_start": 136,
      "line_end": 149,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "centros_muescas"
      ],
      "return_type": null,
      "docstring": "Extrae las coordenadas de la primera muesca desde el array de centros\n\nArgs:\n    centros_muescas: Array de centros guardado en BD\n\nReturns:\n    Tupla (x, y) de la primera muesca",
      "complexity": 3,
      "calls": "{'get', 'len'}",
      "called_by": "{'elementos_utils.py:obtener_datos_elementos_para_renderizar'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "elementos_utils.py:obtener_datos_elementos_para_renderizar": {
      "id": "elementos_utils.py:obtener_datos_elementos_para_renderizar",
      "name": "obtener_datos_elementos_para_renderizar",
      "file_path": "elementos_utils.py",
      "line_start": 152,
      "line_end": 220,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "request_method",
        "request_json_data",
        "junta"
      ],
      "return_type": null,
      "docstring": "Obtiene datos de elementos para renderizar (desde POST request o desde BD)\n\nArgs:\n    request_method: 'GET' o 'POST'\n    request_json_data: request.get_json() si es POST, None si es GET\n    junta: Diccionario de la junta desde BD\n\nReturns:\n    Diccionario con datos listos para renderizar",
      "complexity": 8,
      "calls": "{'elementos_utils.py:obtener_primera_muesca_desde_centros', 'elementos_utils.py:get_coord', 'get'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "elementos_utils.py:parse_bool": {
      "id": "elementos_utils.py:parse_bool",
      "name": "parse_bool",
      "file_path": "elementos_utils.py",
      "line_start": 61,
      "line_end": 62,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "value"
      ],
      "return_type": null,
      "docstring": null,
      "complexity": 2,
      "calls": "set()",
      "called_by": "{'elementos_utils.py:extraer_datos_elementos_form'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "elementos_utils.py:parse_float": {
      "id": "elementos_utils.py:parse_float",
      "name": "parse_float",
      "file_path": "elementos_utils.py",
      "line_start": 65,
      "line_end": 68,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "value",
        "default"
      ],
      "return_type": null,
      "docstring": null,
      "complexity": 3,
      "calls": "{'float', 'strip', 'str'}",
      "called_by": "{'elementos_utils.py:extraer_datos_elementos_form'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "elementos_utils.py:parse_int": {
      "id": "elementos_utils.py:parse_int",
      "name": "parse_int",
      "file_path": "elementos_utils.py",
      "line_start": 70,
      "line_end": 73,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "value",
        "default"
      ],
      "return_type": null,
      "docstring": null,
      "complexity": 3,
      "calls": "{'int', 'strip', 'str'}",
      "called_by": "{'elementos_utils.py:extraer_datos_elementos_form'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "elementos_utils.py:get_coord": {
      "id": "elementos_utils.py:get_coord",
      "name": "get_coord",
      "file_path": "elementos_utils.py",
      "line_start": 165,
      "line_end": 172,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "key",
        "junta_key"
      ],
      "return_type": null,
      "docstring": null,
      "complexity": 4,
      "calls": "{'get'}",
      "called_by": "{'elementos_utils.py:obtener_datos_elementos_para_renderizar'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "illinois-server.py:index": {
      "id": "illinois-server.py:index",
      "name": "index",
      "file_path": "illinois-server.py",
      "line_start": 77,
      "line_end": 79,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Página principal con Panel de Control y Dashboard lado a lado",
      "complexity": 1,
      "calls": "{'send_from_directory', 'route'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:serve_template": {
      "id": "illinois-server.py:serve_template",
      "name": "serve_template",
      "file_path": "illinois-server.py",
      "line_start": 82,
      "line_end": 84,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "filename"
      ],
      "return_type": null,
      "docstring": "Servir archivos HTML de templates",
      "complexity": 1,
      "calls": "{'send_from_directory', 'route'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:serve_static": {
      "id": "illinois-server.py:serve_static",
      "name": "serve_static",
      "file_path": "illinois-server.py",
      "line_start": 87,
      "line_end": 89,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "filename"
      ],
      "return_type": null,
      "docstring": "Servir archivos estáticos (CSS, JS, imágenes)",
      "complexity": 1,
      "calls": "{'send_from_directory', 'route'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:serve_imagenes_juntas": {
      "id": "illinois-server.py:serve_imagenes_juntas",
      "name": "serve_imagenes_juntas",
      "file_path": "illinois-server.py",
      "line_start": 92,
      "line_end": 94,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "filename"
      ],
      "return_type": null,
      "docstring": "Servir imágenes de juntas",
      "complexity": 1,
      "calls": "{'send_from_directory', 'route'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:serve_juntas_analisis": {
      "id": "illinois-server.py:serve_juntas_analisis",
      "name": "serve_juntas_analisis",
      "file_path": "illinois-server.py",
      "line_start": 97,
      "line_end": 99,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "filename"
      ],
      "return_type": null,
      "docstring": "Servir archivos de análisis y visualizaciones de juntas",
      "complexity": 1,
      "calls": "{'send_from_directory', 'route'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:api_status": {
      "id": "illinois-server.py:api_status",
      "name": "api_status",
      "file_path": "illinois-server.py",
      "line_start": 105,
      "line_end": 112,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Estado del servidor",
      "complexity": 1,
      "calls": "{'now', 'isoformat', 'jsonify', 'route'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:api_get_config": {
      "id": "illinois-server.py:api_get_config",
      "name": "api_get_config",
      "file_path": "illinois-server.py",
      "line_start": 118,
      "line_end": 124,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Obtiene la configuración completa",
      "complexity": 2,
      "calls": "{'illinois-server.py:load_config', 'jsonify', 'str', 'route'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:api_connect_camera": {
      "id": "illinois-server.py:api_connect_camera",
      "name": "api_connect_camera",
      "file_path": "illinois-server.py",
      "line_start": 127,
      "line_end": 141,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Intenta conectarse a la cámara guardada en config.json",
      "complexity": 2,
      "calls": "{'connectToCamera', 'jsonify', 'str', 'route'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:api_scan_cameras": {
      "id": "illinois-server.py:api_scan_cameras",
      "name": "api_scan_cameras",
      "file_path": "illinois-server.py",
      "line_start": 144,
      "line_end": 169,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Escanea cámaras disponibles del sistema",
      "complexity": 3,
      "calls": "{'enumerate', 'str', 'jsonify', 'scan_cameras', 'route', 'append'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:api_get_resolutions": {
      "id": "illinois-server.py:api_get_resolutions",
      "name": "api_get_resolutions",
      "file_path": "illinois-server.py",
      "line_start": 172,
      "line_end": 189,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Obtiene resoluciones soportadas para una cámara",
      "complexity": 4,
      "calls": "{'jsonify', 'str', 'get', 'route', 'get_supported_resolutions'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:api_connect_cam": {
      "id": "illinois-server.py:api_connect_cam",
      "name": "api_connect_cam",
      "file_path": "illinois-server.py",
      "line_start": 192,
      "line_end": 226,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Conecta a una cámara específica y guarda la configuración",
      "complexity": 5,
      "calls": "{'str', 'jsonify', 'save_camera_config', 'get_json', 'connect_camera', 'get', 'route'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:video_feed": {
      "id": "illinois-server.py:video_feed",
      "name": "video_feed",
      "file_path": "illinois-server.py",
      "line_start": 229,
      "line_end": 259,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Stream de video en vivo desde la cámara, o frame estático si hay overlay temporal activo",
      "complexity": 8,
      "calls": "{'str', 'sleep', 'illinois-server.py:generate', 'encode', 'time', 'route', 'print', 'len', 'get_frame', 'Response'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:load_aruco_config": {
      "id": "illinois-server.py:load_aruco_config",
      "name": "load_aruco_config",
      "file_path": "illinois-server.py",
      "line_start": 265,
      "line_end": 288,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Carga la configuración de ArUcos desde config.json",
      "complexity": 3,
      "calls": "{'open', 'load'}",
      "called_by": "{'illinois-server.py:api_aruco_save_config', 'illinois-server.py:api_aruco_config'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:save_aruco_config": {
      "id": "illinois-server.py:save_aruco_config",
      "name": "save_aruco_config",
      "file_path": "illinois-server.py",
      "line_start": 290,
      "line_end": 298,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "config"
      ],
      "return_type": null,
      "docstring": "Guarda la configuración COMPLETA en config.json",
      "complexity": 3,
      "calls": "{'open', 'print', 'dump'}",
      "called_by": "{'illinois-server.py:api_aruco_save_config'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:api_aruco_config": {
      "id": "illinois-server.py:api_aruco_config",
      "name": "api_aruco_config",
      "file_path": "illinois-server.py",
      "line_start": 301,
      "line_end": 309,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Obtiene la configuración actual de ArUcos",
      "complexity": 2,
      "calls": "{'str', 'jsonify', 'illinois-server.py:load_aruco_config', 'get', 'route', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:api_overlay_render": {
      "id": "illinois-server.py:api_overlay_render",
      "name": "api_overlay_render",
      "file_path": "illinois-server.py",
      "line_start": 314,
      "line_end": 414,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Endpoint para renderizar overlays con ArUcos",
      "complexity": 7,
      "calls": "{'jsonify', 'sleep', 'get_global_overlay_manager', 'print_exc', 'str', 'render_overlay_with_arucos', 'get_json', 'range', 'tobytes', 'get', 'time', 'route', 'print', 'b64encode', 'imencode', 'render', 'decode', 'get_frame_raw'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:api_aruco_set_reference": {
      "id": "illinois-server.py:api_aruco_set_reference",
      "name": "api_aruco_set_reference",
      "file_path": "illinois-server.py",
      "line_start": 417,
      "line_end": 872,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Aplica la configuración de ArUcos",
      "complexity": 39,
      "calls": "{'str', 'set_background', 'print_exc', 'add_line', 'add_circle', 'startswith', 'int', 'get_global_overlay_manager', 'tobytes', 'get', 'detect_arucos_in_image', 'min', 'max', 'jsonify', 'define_frame', 'cos', 'keys', 'create_renderlist', 'time', 'print', 'imencode', 'b64encode', 'render', 'sin', 'extend', 'route', 'cvtColor', 'add_polygon', 'append', 'decode'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:api_aruco_save_config": {
      "id": "illinois-server.py:api_aruco_save_config",
      "name": "api_aruco_save_config",
      "file_path": "illinois-server.py",
      "line_start": 876,
      "line_end": 1106,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Guardar configuración de ArUcos y objetos de renderizado persistentes",
      "complexity": 15,
      "calls": "{'str', 'is_frame_detected', 'print_exc', 'add_line', 'add_circle', 'get_global_overlay_manager', 'arctan2', 'illinois-server.py:load_aruco_config', 'save_persistent_config', 'get', 'len', 'detect_arucos_in_image', 'min', 'max', 'jsonify', 'define_frame', 'illinois-server.py:save_aruco_config', 'cos', 'print', 'is_tool_detected', 'sin', 'extend', 'route', 'add_polygon', 'append', 'get_frame_raw'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:load_juntas": {
      "id": "illinois-server.py:load_juntas",
      "name": "load_juntas",
      "file_path": "illinois-server.py",
      "line_start": 1113,
      "line_end": 1121,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Carga todas las juntas desde juntas.json",
      "complexity": 4,
      "calls": "{'open', 'exists', 'print', 'load'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:save_juntas": {
      "id": "illinois-server.py:save_juntas",
      "name": "save_juntas",
      "file_path": "illinois-server.py",
      "line_start": 1123,
      "line_end": 1131,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "return_type": null,
      "docstring": "Guarda juntas en juntas.json",
      "complexity": 3,
      "calls": "{'open', 'print', 'dump'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:launch_chrome": {
      "id": "illinois-server.py:launch_chrome",
      "name": "launch_chrome",
      "file_path": "illinois-server.py",
      "line_start": 1136,
      "line_end": 1187,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "url",
        "kiosk"
      ],
      "return_type": null,
      "docstring": "Lanza Chrome con la URL especificada y guarda el PID.",
      "complexity": 5,
      "calls": "{'getcwd', 'makedirs', 'Popen', 'join', 'exists', 'print'}",
      "called_by": "{'illinois-server.py:main'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:close_chrome": {
      "id": "illinois-server.py:close_chrome",
      "name": "close_chrome",
      "file_path": "illinois-server.py",
      "line_start": 1189,
      "line_end": 1209,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Cierra Chrome de manera segura usando el PID guardado.",
      "complexity": 4,
      "calls": "{'run', 'print'}",
      "called_by": "{'illinois-server.py:shutdown_system', 'illinois-server.py:main'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:shutdown_system": {
      "id": "illinois-server.py:shutdown_system",
      "name": "shutdown_system",
      "file_path": "illinois-server.py",
      "line_start": 1214,
      "line_end": 1245,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Cierra el sistema de manera ordenada.",
      "complexity": 3,
      "calls": "{'illinois-server.py:close_chrome', 'exit', 'sleep', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:load_config": {
      "id": "illinois-server.py:load_config",
      "name": "load_config",
      "file_path": "illinois-server.py",
      "line_start": 1252,
      "line_end": 1260,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Carga la configuración completa desde config.json",
      "complexity": 4,
      "calls": "{'open', 'exists', 'print', 'load'}",
      "called_by": "{'illinois-server.py:api_get_config', 'illinois-server.py:initialize_yolo_models'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:save_config": {
      "id": "illinois-server.py:save_config",
      "name": "save_config",
      "file_path": "illinois-server.py",
      "line_start": 1262,
      "line_end": 1271,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "config_data"
      ],
      "return_type": null,
      "docstring": "Guarda la configuración completa en config.json",
      "complexity": 3,
      "calls": "{'open', 'print', 'dump'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:initialize_yolo_models": {
      "id": "illinois-server.py:initialize_yolo_models",
      "name": "initialize_yolo_models",
      "file_path": "illinois-server.py",
      "line_start": 1276,
      "line_end": 1310,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Carga los modelos YOLO globalmente al iniciar el servidor",
      "complexity": 7,
      "calls": "{'illinois-server.py:load_config', 'get', 'exists', 'print', 'load_model'}",
      "called_by": "{'illinois-server.py:main'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:main": {
      "id": "illinois-server.py:main",
      "name": "main",
      "file_path": "illinois-server.py",
      "line_start": 1315,
      "line_end": 1448,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Función principal del servidor.",
      "complexity": 9,
      "calls": "{'ArgumentParser', 'start', 'parse_args', 'sleep', 'getcwd', 'exit', 'run', 'abspath', 'wait', 'Thread', 'print', 'add_argument', 'connectToCamera', 'illinois-server.py:close_chrome', 'illinois-server.py:launch_chrome', 'illinois-server.py:initialize_yolo_models'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:generate": {
      "id": "illinois-server.py:generate",
      "name": "generate",
      "file_path": "illinois-server.py",
      "line_start": 231,
      "line_end": 257,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": null,
      "complexity": 8,
      "calls": "{'str', 'sleep', 'encode', 'len', 'time', 'print', 'get_frame'}",
      "called_by": "{'illinois-server.py:video_feed'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "illinois-server.py:run_flask": {
      "id": "illinois-server.py:run_flask",
      "name": "run_flask",
      "file_path": "illinois-server.py",
      "line_start": 1360,
      "line_end": 1365,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Ejecutar Flask en thread separado",
      "complexity": 2,
      "calls": "{'run', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:get_mqtt_manager": {
      "id": "mqtt_manager.py:get_mqtt_manager",
      "name": "get_mqtt_manager",
      "file_path": "mqtt_manager.py",
      "line_start": 794,
      "line_end": 808,
      "is_method": true,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Obtiene la instancia global del MQTTManager (patrón singleton).\n\nReturns:\n    Instancia de MQTTManager",
      "complexity": 3,
      "calls": "{'MQTTManager', 'hasattr'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:__init__": {
      "id": "mqtt_manager.py:__init__",
      "name": "__init__",
      "file_path": "mqtt_manager.py",
      "line_start": 41,
      "line_end": 81,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "config_path"
      ],
      "return_type": null,
      "docstring": "Inicializa el gestor MQTT.\n\nArgs:\n    config_path: Ruta al archivo de configuración JSON",
      "complexity": 1,
      "calls": "{'info', 'getLogger', 'mqtt_manager.py:_load_config', 'Lock', 'Event'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:state": {
      "id": "mqtt_manager.py:state",
      "name": "state",
      "file_path": "mqtt_manager.py",
      "line_start": 88,
      "line_end": 91,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Obtiene el estado actual de la máquina de estados",
      "complexity": 2,
      "calls": "set()",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:_set_state": {
      "id": "mqtt_manager.py:_set_state",
      "name": "_set_state",
      "file_path": "mqtt_manager.py",
      "line_start": 93,
      "line_end": 105,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "new_state"
      ],
      "return_type": null,
      "docstring": "Cambia el estado de la máquina de estados\n\nArgs:\n    new_state: Nuevo estado",
      "complexity": 3,
      "calls": "{'info', 'print'}",
      "called_by": "{'mqtt_manager.py:_mqtt_worker', 'mqtt_manager.py:_on_connect', 'mqtt_manager.py:_on_disconnect'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:connected": {
      "id": "mqtt_manager.py:connected",
      "name": "connected",
      "file_path": "mqtt_manager.py",
      "line_start": 108,
      "line_end": 110,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Retorna True si el estado es CONNECTED",
      "complexity": 1,
      "calls": "set()",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:is_running": {
      "id": "mqtt_manager.py:is_running",
      "name": "is_running",
      "file_path": "mqtt_manager.py",
      "line_start": 113,
      "line_end": 115,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Retorna True si el thread MQTT está activo",
      "complexity": 2,
      "calls": "{'is_alive'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:_load_config": {
      "id": "mqtt_manager.py:_load_config",
      "name": "_load_config",
      "file_path": "mqtt_manager.py",
      "line_start": 117,
      "line_end": 149,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Carga la configuración MQTT desde el archivo JSON.\n\nReturns:\n    Diccionario con la configuración MQTT",
      "complexity": 4,
      "calls": "{'open', 'debug', 'warning', 'load', 'info', 'get', 'error'}",
      "called_by": "{'mqtt_manager.py:__init__'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:save_config": {
      "id": "mqtt_manager.py:save_config",
      "name": "save_config",
      "file_path": "mqtt_manager.py",
      "line_start": 151,
      "line_end": 206,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "broker_ip",
        "broker_port",
        "topic_commands",
        "topic_keyboard",
        "topic_responses",
        "connect_on_start"
      ],
      "return_type": null,
      "docstring": "Guarda la configuración MQTT en el archivo JSON.\n\nArgs:\n    broker_ip: Dirección IP del broker MQTT\n    broker_port: Puerto del broker (default: 1883)\n    topic_commands: Topic para recibir comandos\n    topic_keyboard: Topic para emular teclado\n    topic_responses: Topic para enviar respuestas\n\nReturns:\n    True si se guardó correctamente, False en caso contrario",
      "complexity": 5,
      "calls": "{'open', 'load', 'info', 'dump', 'error'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:get_config": {
      "id": "mqtt_manager.py:get_config",
      "name": "get_config",
      "file_path": "mqtt_manager.py",
      "line_start": 208,
      "line_end": 226,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Obtiene la configuración MQTT actual.\n\nReturns:\n    Diccionario con la configuración",
      "complexity": 1,
      "calls": "set()",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:_on_connect": {
      "id": "mqtt_manager.py:_on_connect",
      "name": "_on_connect",
      "file_path": "mqtt_manager.py",
      "line_start": 232,
      "line_end": 270,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "client",
        "userdata",
        "flags",
        "rc"
      ],
      "return_type": null,
      "docstring": "Callback interno cuando se establece conexión.",
      "complexity": 5,
      "calls": "{'on_connect_callback', 'mqtt_manager.py:subscribe', 'info', 'get', 'error', 'mqtt_manager.py:_set_state'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:_on_disconnect": {
      "id": "mqtt_manager.py:_on_disconnect",
      "name": "_on_disconnect",
      "file_path": "mqtt_manager.py",
      "line_start": 272,
      "line_end": 287,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "client",
        "userdata",
        "rc"
      ],
      "return_type": null,
      "docstring": "Callback interno cuando se pierde la conexión.",
      "complexity": 5,
      "calls": "{'warning', 'info', 'on_disconnect_callback', 'error', 'mqtt_manager.py:_set_state'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:_on_message": {
      "id": "mqtt_manager.py:_on_message",
      "name": "_on_message",
      "file_path": "mqtt_manager.py",
      "line_start": 289,
      "line_end": 307,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "client",
        "userdata",
        "msg"
      ],
      "return_type": null,
      "docstring": "Callback interno cuando se recibe un mensaje.",
      "complexity": 6,
      "calls": "{'mqtt_manager.py:_process_command_message', 'debug', 'mqtt_manager.py:_process_keyboard_message', 'mqtt_manager.py:_process_response_message', 'error', 'on_message_callback', 'decode'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:_process_command_message": {
      "id": "mqtt_manager.py:_process_command_message",
      "name": "_process_command_message",
      "file_path": "mqtt_manager.py",
      "line_start": 309,
      "line_end": 324,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "payload"
      ],
      "return_type": null,
      "docstring": "Procesa mensajes del topic de comandos.",
      "complexity": 4,
      "calls": "{'loads', 'warning', 'info', 'get', 'error'}",
      "called_by": "{'mqtt_manager.py:_on_message'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:_process_keyboard_message": {
      "id": "mqtt_manager.py:_process_keyboard_message",
      "name": "_process_keyboard_message",
      "file_path": "mqtt_manager.py",
      "line_start": 326,
      "line_end": 336,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "payload"
      ],
      "return_type": null,
      "docstring": "Procesa mensajes del topic de teclado.",
      "complexity": 2,
      "calls": "{'info', 'error'}",
      "called_by": "{'mqtt_manager.py:_on_message'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:_process_response_message": {
      "id": "mqtt_manager.py:_process_response_message",
      "name": "_process_response_message",
      "file_path": "mqtt_manager.py",
      "line_start": 338,
      "line_end": 367,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "payload"
      ],
      "return_type": null,
      "docstring": "Procesa mensajes del topic de respuestas.",
      "complexity": 7,
      "calls": "{'loads', 'warning', 'info', 'mqtt_manager.py:_update_mqtt_icon_status', 'get', 'error'}",
      "called_by": "{'mqtt_manager.py:_on_message'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:_update_mqtt_icon_status": {
      "id": "mqtt_manager.py:_update_mqtt_icon_status",
      "name": "_update_mqtt_icon_status",
      "file_path": "mqtt_manager.py",
      "line_start": 369,
      "line_end": 395,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "status"
      ],
      "return_type": null,
      "docstring": "Actualiza el estado del icono MQTT en la interfaz.",
      "complexity": 6,
      "calls": "{'info', 'post', 'print', 'error'}",
      "called_by": "{'mqtt_manager.py:send_command_and_wait', 'mqtt_manager.py:_process_response_message'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:_mqtt_worker": {
      "id": "mqtt_manager.py:_mqtt_worker",
      "name": "_mqtt_worker",
      "file_path": "mqtt_manager.py",
      "line_start": 401,
      "line_end": 466,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Worker del thread MQTT.\nGestiona la conexión usando la máquina de estados.",
      "complexity": 7,
      "calls": "{'int', 'sleep', 'error', 'loop_start', 'reconnect', 'is_set', 'Client', 'info', 'time', 'loop_stop', 'print', 'mqtt_manager.py:connect', 'mqtt_manager.py:disconnect', 'mqtt_manager.py:_set_state'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:start": {
      "id": "mqtt_manager.py:start",
      "name": "start",
      "file_path": "mqtt_manager.py",
      "line_start": 472,
      "line_end": 503,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Inicia el thread MQTT.\n\nReturns:\n    True si se inició correctamente, False si ya estaba corriendo o falló",
      "complexity": 4,
      "calls": "{'warning', 'clear', 'info', 'Thread', 'error', 'mqtt_manager.py:start'}",
      "called_by": "{'mqtt_manager.py:send_command_and_wait', 'mqtt_manager.py:start', 'mqtt_manager.py:connect'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:stop": {
      "id": "mqtt_manager.py:stop",
      "name": "stop",
      "file_path": "mqtt_manager.py",
      "line_start": 505,
      "line_end": 526,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "timeout"
      ],
      "return_type": null,
      "docstring": "Detiene el thread MQTT de forma ordenada.\n\nArgs:\n    timeout: Tiempo máximo de espera en segundos",
      "complexity": 4,
      "calls": "{'is_alive', 'warning', 'join', 'info', 'set'}",
      "called_by": "{'mqtt_manager.py:disconnect'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:connect": {
      "id": "mqtt_manager.py:connect",
      "name": "connect",
      "file_path": "mqtt_manager.py",
      "line_start": 528,
      "line_end": 546,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "broker_ip",
        "broker_port"
      ],
      "return_type": null,
      "docstring": "DEPRECADO: Usa start() en su lugar.\nConecta al broker MQTT usando el thread dedicado.\n\nArgs:\n    broker_ip: Dirección IP del broker (usa la configuración si es None)\n    broker_port: Puerto del broker (usa la configuración si es None)\n\nReturns:\n    True si se inició correctamente",
      "complexity": 3,
      "calls": "{'mqtt_manager.py:start'}",
      "called_by": "{'mqtt_manager.py:_mqtt_worker', 'mqtt_manager.py:test_connection'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:disconnect": {
      "id": "mqtt_manager.py:disconnect",
      "name": "disconnect",
      "file_path": "mqtt_manager.py",
      "line_start": 548,
      "line_end": 553,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "DEPRECADO: Usa stop() en su lugar.\nDesconecta del broker MQTT.",
      "complexity": 1,
      "calls": "{'mqtt_manager.py:stop'}",
      "called_by": "{'mqtt_manager.py:_mqtt_worker', 'mqtt_manager.py:test_connection'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:publish": {
      "id": "mqtt_manager.py:publish",
      "name": "publish",
      "file_path": "mqtt_manager.py",
      "line_start": 555,
      "line_end": 590,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "topic",
        "payload",
        "qos",
        "retain"
      ],
      "return_type": null,
      "docstring": "Publica un mensaje en un topic.\n\nArgs:\n    topic: Topic MQTT donde publicar\n    payload: Datos a publicar (puede ser string, dict, etc.)\n    qos: Calidad de servicio (0, 1 o 2) - default 2 para garantizar entrega\n    retain: Si el broker debe retener el mensaje\n\nReturns:\n    True si se publicó correctamente, False en caso contrario",
      "complexity": 7,
      "calls": "{'dumps', 'debug', 'str', 'isinstance', 'error', 'mqtt_manager.py:publish'}",
      "called_by": "{'mqtt_manager.py:send_command_and_wait', 'mqtt_manager.py:publish'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:subscribe": {
      "id": "mqtt_manager.py:subscribe",
      "name": "subscribe",
      "file_path": "mqtt_manager.py",
      "line_start": 592,
      "line_end": 619,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "topic",
        "qos"
      ],
      "return_type": null,
      "docstring": "Se suscribe a un topic.\n\nArgs:\n    topic: Topic MQTT al que suscribirse\n    qos: Calidad de servicio (0, 1 o 2) - default 2 para garantizar entrega\n\nReturns:\n    True si se suscribió correctamente, False en caso contrario",
      "complexity": 5,
      "calls": "{'info', 'mqtt_manager.py:subscribe', 'error'}",
      "called_by": "{'mqtt_manager.py:_on_connect', 'mqtt_manager.py:subscribe'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:unsubscribe": {
      "id": "mqtt_manager.py:unsubscribe",
      "name": "unsubscribe",
      "file_path": "mqtt_manager.py",
      "line_start": 621,
      "line_end": 647,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "topic"
      ],
      "return_type": null,
      "docstring": "Se desuscribe de un topic.\n\nArgs:\n    topic: Topic del que desuscribirse\n\nReturns:\n    True si se desuscribió correctamente, False en caso contrario",
      "complexity": 5,
      "calls": "{'info', 'mqtt_manager.py:unsubscribe', 'error'}",
      "called_by": "{'mqtt_manager.py:unsubscribe'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:test_connection": {
      "id": "mqtt_manager.py:test_connection",
      "name": "test_connection",
      "file_path": "mqtt_manager.py",
      "line_start": 649,
      "line_end": 709,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "broker_ip",
        "broker_port",
        "timeout"
      ],
      "return_type": null,
      "docstring": "Prueba la conexión con un broker MQTT sin mantener la conexión.\n\nArgs:\n    broker_ip: Dirección IP del broker\n    broker_port: Puerto del broker\n    timeout: Tiempo máximo de espera en segundos\n\nReturns:\n    Tupla (éxito, mensaje)",
      "complexity": 9,
      "calls": "{'int', 'str', 'sleep', 'loop_start', 'Client', 'time', 'loop_stop', 'get', 'mqtt_manager.py:connect', 'mqtt_manager.py:disconnect'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:wait_for_response": {
      "id": "mqtt_manager.py:wait_for_response",
      "name": "wait_for_response",
      "file_path": "mqtt_manager.py",
      "line_start": 711,
      "line_end": 734,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "request_id",
        "timeout"
      ],
      "return_type": null,
      "docstring": "Espera la respuesta de un comando específico.\n\nArgs:\n    request_id: ID del comando enviado\n    timeout: Tiempo máximo de espera en segundos\n\nReturns:\n    Diccionario con la respuesta o None si timeout",
      "complexity": 4,
      "calls": "{'sleep', 'warning', 'info', 'time', 'pop'}",
      "called_by": "{'mqtt_manager.py:send_command_and_wait'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:send_command_and_wait": {
      "id": "mqtt_manager.py:send_command_and_wait",
      "name": "send_command_and_wait",
      "file_path": "mqtt_manager.py",
      "line_start": 736,
      "line_end": 787,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "command_data",
        "timeout"
      ],
      "return_type": null,
      "docstring": "Envía un comando y espera la respuesta.\n\nArgs:\n    command_data: Diccionario con el comando a enviar\n    timeout: Tiempo máximo de espera en segundos\n\nReturns:\n    Diccionario con la respuesta o None si error/timeout",
      "complexity": 9,
      "calls": "{'Timer', 'mqtt_manager.py:start', 'info', 'mqtt_manager.py:_update_mqtt_icon_status', 'get', 'error', 'mqtt_manager.py:publish', 'mqtt_manager.py:wait_for_response'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "mqtt_manager.py:on_connect": {
      "id": "mqtt_manager.py:on_connect",
      "name": "on_connect",
      "file_path": "mqtt_manager.py",
      "line_start": 668,
      "line_end": 680,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "client",
        "userdata",
        "flags",
        "rc"
      ],
      "return_type": null,
      "docstring": null,
      "complexity": 2,
      "calls": "{'get'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "muescas_renderer.py:dibujar_muescas": {
      "id": "muescas_renderer.py:dibujar_muescas",
      "name": "dibujar_muescas",
      "file_path": "muescas_renderer.py",
      "line_start": 13,
      "line_end": 90,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "img",
        "cantidad_muescas",
        "muesca_x_mm",
        "muesca_y_mm",
        "punto_medio_px",
        "mm_por_pixel",
        "vertical",
        "diametro_muesca_mm",
        "separacion_muescas_mm"
      ],
      "return_type": null,
      "docstring": "Dibuja muescas en la imagen usando el punto medio como origen\n\nArgs:\n    img: Imagen sobre la cual dibujar (puede ser grayscale o BGR)\n    cantidad_muescas: Número de muescas a dibujar\n    muesca_x_mm: Coordenada X de la primera muesca en mm\n    muesca_y_mm: Coordenada Y de la primera muesca en mm\n    punto_medio_px: Coordenadas del punto medio del segmento rojo (origen)\n    mm_por_pixel: Factor de conversión\n    diametro_muesca_mm: Diámetro de cada muesca en mm (default: 4mm)\n    separacion_muescas_mm: Separación entre centros en mm (default: 7mm)\n\nReturns:\n    Imagen con las muescas dibujadas",
      "complexity": 6,
      "calls": "{'int', 'circle', 'range', 'copy', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "muescas_renderer.py:calcular_punto_medio_segmento": {
      "id": "muescas_renderer.py:calcular_punto_medio_segmento",
      "name": "calcular_punto_medio_segmento",
      "file_path": "muescas_renderer.py",
      "line_start": 93,
      "line_end": 116,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "analisis_data"
      ],
      "return_type": null,
      "docstring": "Extrae el punto medio del segmento rojo del análisis\n\nArgs:\n    analisis_data: Datos del análisis completo\n\nReturns:\n    Tupla (x, y) del punto medio o None si no existe",
      "complexity": 7,
      "calls": "{'int', 'get', 'len', 'isinstance'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:analizar_con_reintentos": {
      "id": "pipeline_analisis.py:analizar_con_reintentos",
      "name": "analizar_con_reintentos",
      "file_path": "pipeline_analisis.py",
      "line_start": 50,
      "line_end": 99,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "max_intentos"
      ],
      "return_type": null,
      "docstring": "Intenta analizar un frame hasta obtener un resultado válido.\n\nEstrategia:\n- Loop de 1 a max_intentos\n- Si algún intento es exitoso → retorna imagen con overlay y datos\n- Si todos fallan → retorna None (sin imagen), solo datos para tabla\n\nArgs:\n    frame: Imagen RGB de OpenCV\n    max_intentos: Número máximo de intentos (default: 3)\n\nReturns:\n    (exito: bool, imagen_procesada: bytes|None, datos: dict)\n    - exito: True si pasó todas las validaciones\n    - imagen_procesada: JPEG bytes si exitoso, None si falló\n    - datos: Diccionario con resultados del análisis",
      "complexity": 3,
      "calls": "{'range', 'pipeline_analisis.py:analizar_frame_completo', 'get', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:analizar_frame_completo": {
      "id": "pipeline_analisis.py:analizar_frame_completo",
      "name": "analizar_frame_completo",
      "file_path": "pipeline_analisis.py",
      "line_start": 106,
      "line_end": 485,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame"
      ],
      "return_type": null,
      "docstring": "Ejecuta el pipeline completo de análisis en un frame.\n\nVALIDACIONES TEMPRANAS (Early Returns):\n- ArUco no detectado → Return inmediato\n- Junta no detectada → Return inmediato\n- Cantidad pistones incorrecta → Return inmediato (ahorra OpenCV)\n- Distancia fuera de tolerancia → Return inmediato (ahorra validaciones geométricas)\n\nVALIDACIONES FINALES (Sin Early Return):\n- Validaciones geométricas → Continúa, genera overlay para debug visual\n\nArgs:\n    frame: Imagen RGB de OpenCV\n\nReturns:\n    (exito: bool, imagen_procesada: bytes, datos: dict)",
      "complexity": 28,
      "calls": "{'pipeline_analisis.py:corregir_perspectiva', 'pipeline_analisis.py:calcular_offset_vector', 'pipeline_analisis.py:_cargar_analisis_junta', 'copy', 'int', 'pipeline_analisis.py:detectar_agujeros', 'validar_todo', 'abs', 'tobytes', 'get', 'len', 'load_config', 'pipeline_analisis.py:detectar_junta', 'pipeline_analisis.py:calcular_coords_primera_muesca_respecto_tool', 'pipeline_analisis.py:_cargar_junta_seleccionada', 'print', 'imencode', 'pipeline_analisis.py:_cargar_config', 'pipeline_analisis.py:calcular_metricas', 'pipeline_analisis.py:detectar_aruco', 'dibujar_todo', 'pipeline_analisis.py:calcular_posiciones_muescas'}",
      "called_by": "{'pipeline_analisis.py:analizar_con_reintentos'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:detectar_aruco": {
      "id": "pipeline_analisis.py:detectar_aruco",
      "name": "detectar_aruco",
      "file_path": "pipeline_analisis.py",
      "line_start": 492,
      "line_end": 584,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame"
      ],
      "return_type": null,
      "docstring": "Detecta el marcador ArUco Frame (calibración) y calcula px_per_mm.\n\nMODOS DE OPERACIÓN:\n1. Usar referencia guardada (si use_saved_reference=True)\n2. Detectar en tiempo real (si use_saved_reference=False o no hay guardado)\n\nArgs:\n    frame: Imagen RGB de OpenCV\n\nReturns:\n    dict: {\n        'id': int,\n        'center': (x, y),\n        'px_per_mm': float,\n        'angle_rad': float,\n        'corners': [[x,y], ...],\n        'source': 'saved' | 'detected'\n    }\n    o None si no se detecta",
      "complexity": 5,
      "calls": "{'all', 'arctan2', 'detect_aruco_by_id', 'load_config', 'get', 'print', 'array'}",
      "called_by": "{'pipeline_analisis.py:analizar_frame_completo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:detectar_junta": {
      "id": "pipeline_analisis.py:detectar_junta",
      "name": "detectar_junta",
      "file_path": "pipeline_analisis.py",
      "line_start": 587,
      "line_end": 630,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame"
      ],
      "return_type": null,
      "docstring": "Detecta la junta completa usando YOLO Detection Model.\nSoporta tanto YOLO normal (bbox) como YOLO-OBB (rotado).\n\nArgs:\n    frame: Imagen RGB de OpenCV\n\nReturns:\n    dict: {\n        'bbox': (x1, y1, x2, y2),\n        'tipo': 'obb' | 'rect',\n        ... otros campos según tipo\n    }\n    o None si no se detecta",
      "complexity": 4,
      "calls": "{'detect_gasket', 'get', 'isinstance'}",
      "called_by": "{'pipeline_analisis.py:analizar_frame_completo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:detectar_agujeros": {
      "id": "pipeline_analisis.py:detectar_agujeros",
      "name": "detectar_agujeros",
      "file_path": "pipeline_analisis.py",
      "line_start": 633,
      "line_end": 745,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "datos_junta"
      ],
      "return_type": null,
      "docstring": "Detecta agujeros en el área de la junta con padding.\n\nSECUENCIA DE 3 ETAPAS:\n1. YOLO Detection detectó la junta → datos_junta\n2. YOLO Holes detecta agujeros → bboxes\n3. OpenCV refina cada agujero → centros precisos\n\nArgs:\n    frame: Imagen RGB de OpenCV\n    datos_junta: Datos de la junta detectada\n\nReturns:\n    list: [{'center': (x, y), 'contour': contour, 'ellipse': ellipse}, ...]",
      "complexity": 5,
      "calls": "{'min', 'int', 'max', 'enumerate', 'detect_holes_bboxes', 'pipeline_analisis.py:calcular_centro_agujero', 'get', 'len', 'print', 'append', 'array'}",
      "called_by": "{'pipeline_analisis.py:analizar_frame_completo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:calcular_centro_agujero": {
      "id": "pipeline_analisis.py:calcular_centro_agujero",
      "name": "calcular_centro_agujero",
      "file_path": "pipeline_analisis.py",
      "line_start": 748,
      "line_end": 835,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "crop_agujero"
      ],
      "return_type": null,
      "docstring": "Función MODULAR y REUTILIZABLE para calcular el centro preciso de un agujero.\n\nRecibe el crop de UN solo pistón y aplica OpenCV para refinamiento.\nSe puede llamar N veces (una por cada detección YOLO).\nSe puede testear independientemente.\n\nESTRATEGIA:\n1. Detectar píxeles donde AZUL es predominante\n2. Crear máscara binaria\n3. Encontrar contornos\n4. Seleccionar contorno de mayor área\n5. Ajustar elipse al contorno\n6. Calcular centro de la elipse\n\nArgs:\n    crop_agujero: Imagen RGB del agujero recortado (numpy array)\n\nReturns:\n    dict: {\n        'center': (x, y),\n        'contour': contour,\n        'ellipse': ellipse_params\n    }\n    o None si no se puede calcular",
      "complexity": 9,
      "calls": "{'int', 'max', 'astype', 'fitEllipse', 'findContours', 'moments', 'contourArea', 'len', 'print', 'zeros_like'}",
      "called_by": "{'pipeline_analisis.py:detectar_agujeros'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:calcular_metricas": {
      "id": "pipeline_analisis.py:calcular_metricas",
      "name": "calcular_metricas",
      "file_path": "pipeline_analisis.py",
      "line_start": 842,
      "line_end": 930,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "datos_agujeros",
        "datos_aruco"
      ],
      "return_type": null,
      "docstring": "Calcula métricas básicas: línea de referencia, punto medio, distancias.\n\nArgs:\n    datos_agujeros: Lista de agujeros detectados\n    datos_aruco: Datos de calibración ArUco\n\nReturns:\n    dict: {\n        'p1': (x, y),\n        'p2': (x, y),\n        'punto_medio': (x, y),\n        'distancia_px': float,\n        'distancia_mm': float,\n        'angle_rad': float,  ← Ángulo del segmento (para rotación de muescas)\n        'centros_ordenados': [...]\n    }",
      "complexity": 4,
      "calls": "{'int', 'sum', 'degrees', 'arctan2', 'sorted', 'len', 'get', 'print', 'round', 'sqrt'}",
      "called_by": "{'pipeline_analisis.py:analizar_frame_completo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:corregir_perspectiva": {
      "id": "pipeline_analisis.py:corregir_perspectiva",
      "name": "corregir_perspectiva",
      "file_path": "pipeline_analisis.py",
      "line_start": 933,
      "line_end": 982,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "datos_aruco"
      ],
      "return_type": null,
      "docstring": "Corrige la perspectiva de la imagen usando el ArUco como referencia.\n\nArgs:\n    frame: Imagen original\n    datos_aruco: {'corners', 'px_per_mm', 'marker_size_mm'}\n\nReturns:\n    (frame_corregido, matriz_transformacion, px_per_mm_corregido)",
      "complexity": 2,
      "calls": "{'norm', 'getPerspectiveTransform', 'warpPerspective', 'get', 'print', 'array'}",
      "called_by": "{'pipeline_analisis.py:analizar_frame_completo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:aplicar_correccion_perspectiva_a_puntos": {
      "id": "pipeline_analisis.py:aplicar_correccion_perspectiva_a_puntos",
      "name": "aplicar_correccion_perspectiva_a_puntos",
      "file_path": "pipeline_analisis.py",
      "line_start": 985,
      "line_end": 1003,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "puntos",
        "transform_matrix"
      ],
      "return_type": null,
      "docstring": "Aplica la corrección de perspectiva a una lista de puntos.\n\nArgs:\n    puntos: Lista de puntos [(x, y), ...]\n    transform_matrix: Matriz de transformación de perspectiva\n\nReturns:\n    Lista de puntos corregidos",
      "complexity": 3,
      "calls": "{'tolist', 'reshape', 'len', 'perspectiveTransform', 'array'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:calcular_offset_vector": {
      "id": "pipeline_analisis.py:calcular_offset_vector",
      "name": "calcular_offset_vector",
      "file_path": "pipeline_analisis.py",
      "line_start": 1006,
      "line_end": 1066,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "datos_aruco",
        "primera_muesca"
      ],
      "return_type": null,
      "docstring": "Calcula el vector offset desde el centro del troquel (cruz amarilla) hasta la primera muesca.\n\nArgs:\n    datos_aruco: {'center', 'px_per_mm'}\n    primera_muesca: {'x_px', 'y_px'}\n\nReturns:\n    {'x_mm', 'y_mm', 'modulo_mm'}",
      "complexity": 3,
      "calls": "{'open', 'get', 'print', 'load'}",
      "called_by": "{'pipeline_analisis.py:analizar_frame_completo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:calcular_coords_primera_muesca_respecto_tool": {
      "id": "pipeline_analisis.py:calcular_coords_primera_muesca_respecto_tool",
      "name": "calcular_coords_primera_muesca_respecto_tool",
      "file_path": "pipeline_analisis.py",
      "line_start": 1069,
      "line_end": 1117,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "datos_aruco",
        "primera_muesca"
      ],
      "return_type": null,
      "docstring": "Calcula las coordenadas de la primera muesca respecto al centro del Tool ArUco.\n\nArgs:\n    datos_aruco: {'center', 'px_per_mm', 'tool_result'}\n    primera_muesca: {'x_px', 'y_px'}\n\nReturns:\n    {'x_mm', 'y_mm', 'x_px', 'y_px', 'pixel_pos'}\n    o None si no hay Tool detectado",
      "complexity": 3,
      "calls": "{'int', 'get', 'print'}",
      "called_by": "{'pipeline_analisis.py:analizar_frame_completo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:calcular_posiciones_muescas": {
      "id": "pipeline_analisis.py:calcular_posiciones_muescas",
      "name": "calcular_posiciones_muescas",
      "file_path": "pipeline_analisis.py",
      "line_start": 1120,
      "line_end": 1211,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "metricas",
        "datos_aruco"
      ],
      "return_type": null,
      "docstring": "Calcula las posiciones en píxeles de las muescas de la junta seleccionada.\n\n⚠️  Esta función SOLO se llama si el análisis fue exitoso.\n\nIMPORTANTE: Usa el ángulo del SEGMENTO de pistones, no del ArUco.\nLas muescas se rotan según la orientación de la junta (segmento rojo).\n\nArgs:\n    metricas: Métricas calculadas (con punto_medio y angle_rad del segmento)\n    datos_aruco: Datos de calibración ArUco (con px_per_mm)\n\nReturns:\n    list: [{'x_px': float, 'y_px': float, 'radio_px': int}, ...]\n    o [] si no hay muescas o no se puede calcular",
      "complexity": 16,
      "calls": "{'open', 'int', 'sin', 'cos', 'load', 'next', 'isinstance', 'get', 'exists', 'print', 'append'}",
      "called_by": "{'pipeline_analisis.py:analizar_frame_completo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:_cargar_config": {
      "id": "pipeline_analisis.py:_cargar_config",
      "name": "_cargar_config",
      "file_path": "pipeline_analisis.py",
      "line_start": 1218,
      "line_end": 1229,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Carga la configuración desde config.json.\n\nReturns:\n    dict con configuración o {}",
      "complexity": 3,
      "calls": "{'open', 'load'}",
      "called_by": "{'pipeline_analisis.py:analizar_frame_completo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:_cargar_junta_seleccionada": {
      "id": "pipeline_analisis.py:_cargar_junta_seleccionada",
      "name": "_cargar_junta_seleccionada",
      "file_path": "pipeline_analisis.py",
      "line_start": 1231,
      "line_end": 1256,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Carga la junta seleccionada desde juntas.json.\n\nReturns:\n    dict con datos de la junta o None",
      "complexity": 5,
      "calls": "{'open', 'load', 'next', 'get', 'exists', 'print'}",
      "called_by": "{'pipeline_analisis.py:analizar_frame_completo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "pipeline_analisis.py:_cargar_analisis_junta": {
      "id": "pipeline_analisis.py:_cargar_analisis_junta",
      "name": "_cargar_analisis_junta",
      "file_path": "pipeline_analisis.py",
      "line_start": 1259,
      "line_end": 1280,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "nombre_junta"
      ],
      "return_type": null,
      "docstring": "Carga el análisis detallado de una junta desde juntas_analisis/.\n\nArgs:\n    nombre_junta: Nombre de la junta\n\nReturns:\n    dict con datos del análisis o {}",
      "complexity": 4,
      "calls": "{'open', 'join', 'load', 'exists', 'print'}",
      "called_by": "{'pipeline_analisis.py:analizar_frame_completo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "textos_renderer.py:dibujar_texto_simple": {
      "id": "textos_renderer.py:dibujar_texto_simple",
      "name": "dibujar_texto_simple",
      "file_path": "textos_renderer.py",
      "line_start": 13,
      "line_end": 114,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "img",
        "texto",
        "x_mm",
        "y_mm",
        "punto_medio_px",
        "mm_por_pixel",
        "vertical",
        "altura_mm"
      ],
      "return_type": null,
      "docstring": "Dibuja un texto en la imagen usando el punto medio como origen\n\nArgs:\n    img: Imagen sobre la cual dibujar\n    texto: Texto a dibujar\n    x_mm: Coordenada X en mm\n    y_mm: Coordenada Y en mm\n    punto_medio_px: Coordenadas del punto medio del segmento rojo (origen)\n    mm_por_pixel: Factor de conversión\n    vertical: True para texto vertical\n    altura_mm: Altura del texto en mm\n\nReturns:\n    Imagen con el texto dibujado",
      "complexity": 4,
      "calls": "{'min', 'int', 'max', 'getTextSize', 'rotate', 'zeros', 'copy', 'putText', 'cvtColor', 'print', 'threshold'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "validaciones_geometricas.py:validar_todo": {
      "id": "validaciones_geometricas.py:validar_todo",
      "name": "validar_todo",
      "file_path": "validaciones_geometricas.py",
      "line_start": 36,
      "line_end": 97,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "datos_agujeros",
        "datos_aruco",
        "metricas"
      ],
      "return_type": null,
      "docstring": "Ejecuta todas las validaciones geométricas.\n\nArgs:\n    datos_agujeros: Lista de agujeros detectados\n    datos_aruco: Datos de calibración ArUco\n    metricas: Métricas calculadas (línea de referencia, etc.)\n\nReturns:\n    dict: {\n        'centros_multiples': {...},\n        'colinealidad': {...},\n        'espaciado_uniforme': {...},\n        'todas_ok': bool\n    }",
      "complexity": 6,
      "calls": "{'validaciones_geometricas.py:validar_centros_multiples', 'load_config', 'get', 'print', 'len', 'validaciones_geometricas.py:validar_colinealidad', 'validaciones_geometricas.py:validar_espaciado_uniforme'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "validaciones_geometricas.py:validar_centros_multiples": {
      "id": "validaciones_geometricas.py:validar_centros_multiples",
      "name": "validar_centros_multiples",
      "file_path": "validaciones_geometricas.py",
      "line_start": 104,
      "line_end": 183,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "centros",
        "px_per_mm",
        "umbral_mm"
      ],
      "return_type": null,
      "docstring": "Valida que el centro calculado por pares simétricos sea consistente.\n\nEstrategia:\n1. Ordena centros de izquierda a derecha\n2. Calcula centro de cada par simétrico (1-N, 2-(N-1), ...)\n3. Calcula centro probabilístico (promedio de todos los centros de pares)\n4. Mide divergencia máxima de cada centro de par respecto al centro probabilístico\n5. OK si divergencia < umbral\n\nArgs:\n    centros: Lista de centros [(x, y), ...]\n    px_per_mm: Relación píxeles por milímetro\n    umbral_mm: Umbral máximo de divergencia en mm\n\nReturns:\n    dict: {'ok': bool, 'divergencia_mm': float, 'umbral_mm': float}",
      "complexity": 5,
      "calls": "{'sum', 'enumerate', 'max', 'sorted', 'range', 'len', 'print', 'round', 'append', 'bool', 'sqrt', 'float'}",
      "called_by": "{'validaciones_geometricas.py:validar_todo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "validaciones_geometricas.py:validar_colinealidad": {
      "id": "validaciones_geometricas.py:validar_colinealidad",
      "name": "validar_colinealidad",
      "file_path": "validaciones_geometricas.py",
      "line_start": 190,
      "line_end": 251,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "centros",
        "px_per_mm",
        "umbral_mm"
      ],
      "return_type": null,
      "docstring": "Valida que todos los centros estén alineados en línea recta.\n\nEstrategia:\n1. Ajusta una línea recta con cv2.fitLine (método robusto)\n2. Calcula distancia perpendicular de cada punto a la línea\n3. OK si desviación máxima < umbral\n\nArgs:\n    centros: Lista de centros [(x, y), ...]\n    px_per_mm: Relación píxeles por milímetro\n    umbral_mm: Umbral máximo de desviación en mm\n\nReturns:\n    dict: {'ok': bool, 'desviacion_maxima_mm': float, 'umbral_mm': float}",
      "complexity": 4,
      "calls": "{'max', 'abs', 'fitLine', 'len', 'print', 'round', 'append', 'bool', 'float', 'array'}",
      "called_by": "{'validaciones_geometricas.py:validar_todo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "validaciones_geometricas.py:validar_espaciado_uniforme": {
      "id": "validaciones_geometricas.py:validar_espaciado_uniforme",
      "name": "validar_espaciado_uniforme",
      "file_path": "validaciones_geometricas.py",
      "line_start": 258,
      "line_end": 314,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "centros",
        "px_per_mm",
        "cv_maximo"
      ],
      "return_type": null,
      "docstring": "Valida que el espaciado entre pistones vecinos sea uniforme.\n\nEstrategia:\n1. Calcula distancia entre cada par de vecinos\n2. Calcula coeficiente de variación (CV = desviación / media)\n3. OK si CV < umbral\n\nArgs:\n    centros: Lista de centros [(x, y), ...] (ya ordenados)\n    px_per_mm: Relación píxeles por milímetro\n    cv_maximo: Coeficiente de variación máximo permitido\n\nReturns:\n    dict: {'ok': bool, 'coeficiente_variacion': float, 'cv_maximo': float}",
      "complexity": 4,
      "calls": "{'append', 'range', 'std', 'len', 'print', 'mean', 'round', 'bool', 'sqrt', 'float'}",
      "called_by": "{'validaciones_geometricas.py:validar_todo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "visualizador.py:dibujar_todo": {
      "id": "visualizador.py:dibujar_todo",
      "name": "dibujar_todo",
      "file_path": "visualizador.py",
      "line_start": 47,
      "line_end": 152,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "datos_visualizacion"
      ],
      "return_type": null,
      "docstring": "Dibuja todos los overlays en el frame en UNA SOLA PASADA.\n\nIMPORTANTE:\n- El diccionario datos_visualizacion SIEMPRE contiene todos los datos\n- Esta función es la ÚNICA que decide QUÉ dibujar\n- Consulta los checkboxes de configuración (config.json)\n- Dibuja solo los elementos habilitados\n\nArgs:\n    frame: Imagen RGB original de OpenCV\n    datos_visualizacion: Diccionario completo con datos del análisis {\n        'aruco': {...},\n        'junta': {...},\n        'agujeros': [...],\n        'linea_referencia': {...},\n        'muescas': [...]\n    }\n\nReturns:\n    Frame con overlays dibujados según configuración",
      "complexity": 15,
      "calls": "{'visualizador.py:_dibujar_linea_tool_muesca', 'visualizador.py:_dibujar_muescas', 'load_config', 'get', 'cvtColor', 'print', 'len', 'visualizador.py:_dibujar_linea_referencia', 'visualizador.py:_dibujar_agujeros', 'visualizador.py:_dibujar_bbox_junta'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "visualizador.py:_dibujar_bbox_junta": {
      "id": "visualizador.py:_dibujar_bbox_junta",
      "name": "_dibujar_bbox_junta",
      "file_path": "visualizador.py",
      "line_start": 161,
      "line_end": 182,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "datos_junta"
      ],
      "return_type": null,
      "docstring": "Dibuja bounding box de la junta (verde).\n\nArgs:\n    frame: Imagen BGR\n    datos_junta: {'tipo': 'obb'|'rect', 'bbox' o 'points'}\n\nReturns:\n    Frame con bbox dibujado",
      "complexity": 2,
      "calls": "{'rectangle', 'drawContours'}",
      "called_by": "{'visualizador.py:dibujar_todo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "visualizador.py:_dibujar_agujeros": {
      "id": "visualizador.py:_dibujar_agujeros",
      "name": "_dibujar_agujeros",
      "file_path": "visualizador.py",
      "line_start": 185,
      "line_end": 216,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "agujeros",
        "show_contours",
        "show_ellipses"
      ],
      "return_type": null,
      "docstring": "Dibuja contornos y/o elipses de agujeros.\n\nArgs:\n    frame: Imagen BGR\n    agujeros: Lista de {'center', 'contour', 'ellipse'}\n    show_contours: Si se dibujan los contornos\n    show_ellipses: Si se dibujan las elipses\n\nReturns:\n    Frame con agujeros dibujados",
      "complexity": 6,
      "calls": "{'astype', 'drawContours', 'ellipse', 'circle', 'tuple', 'get', 'map'}",
      "called_by": "{'visualizador.py:dibujar_todo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "visualizador.py:_dibujar_linea_referencia": {
      "id": "visualizador.py:_dibujar_linea_referencia",
      "name": "_dibujar_linea_referencia",
      "file_path": "visualizador.py",
      "line_start": 219,
      "line_end": 255,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "linea"
      ],
      "return_type": null,
      "docstring": "Dibuja línea roja entre extremos, punto medio azul y todos los centros.\n\nArgs:\n    frame: Imagen BGR\n    linea: {'p1', 'p2', 'punto_medio', 'centros_ordenados'}\n\nReturns:\n    Frame con línea de referencia dibujada",
      "complexity": 5,
      "calls": "{'line', 'circle', 'tuple', 'get', 'map'}",
      "called_by": "{'visualizador.py:dibujar_todo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "visualizador.py:_dibujar_muescas": {
      "id": "visualizador.py:_dibujar_muescas",
      "name": "_dibujar_muescas",
      "file_path": "visualizador.py",
      "line_start": 258,
      "line_end": 283,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "muescas"
      ],
      "return_type": null,
      "docstring": "Dibuja círculos rojos en las posiciones de las muescas.\n\n⚠️  Esta función SOLO se llama si el análisis fue exitoso.\nLas muescas son un indicador visual de que TODO pasó.\n\nArgs:\n    frame: Imagen BGR\n    muescas: Lista de {'x_px', 'y_px', 'radio_px'}\n\nReturns:\n    Frame con muescas dibujadas",
      "complexity": 2,
      "calls": "{'int', 'circle'}",
      "called_by": "{'visualizador.py:dibujar_todo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "visualizador.py:_dibujar_linea_offset": {
      "id": "visualizador.py:_dibujar_linea_offset",
      "name": "_dibujar_linea_offset",
      "file_path": "visualizador.py",
      "line_start": 286,
      "line_end": 357,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "datos_aruco",
        "primera_muesca",
        "linea_referencia"
      ],
      "return_type": null,
      "docstring": "Dibuja línea azul fina desde el centro del troquel hasta la primera muesca.\nTransforma el center_troquel del sistema del ArUco al sistema de la junta (rotado).\n\nArgs:\n    frame: Imagen BGR\n    datos_aruco: {'center', 'px_per_mm'}\n    primera_muesca: {'x_px', 'y_px'} (en sistema de junta rotada)\n    linea_referencia: {'punto_medio', 'angle_rad'}\nReturns:\n    Frame con línea offset dibujada",
      "complexity": 3,
      "calls": "{'open', 'int', 'line', 'sin', 'degrees', 'print_exc', 'cos', 'load', 'get', 'print', 'array'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "visualizador.py:_dibujar_linea_tool_muesca": {
      "id": "visualizador.py:_dibujar_linea_tool_muesca",
      "name": "_dibujar_linea_tool_muesca",
      "file_path": "visualizador.py",
      "line_start": 360,
      "line_end": 398,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "datos_aruco",
        "primera_muesca"
      ],
      "return_type": null,
      "docstring": "Dibuja una línea magenta desde el centro del Tool ArUco hasta la primera muesca.\n\nArgs:\n    frame: Imagen BGR\n    datos_aruco: {'center', 'px_per_mm', 'tool_result'}\n    primera_muesca: {'x_px', 'y_px'} (en sistema de junta rotada)\nReturns:\n    Frame con línea dibujada",
      "complexity": 4,
      "calls": "{'int', 'line', 'print_exc', 'get', 'print'}",
      "called_by": "{'visualizador.py:dibujar_todo'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:load_config": {
      "id": "camera_manager.py:load_config",
      "name": "load_config",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 35,
      "line_end": 44,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Carga configuración desde config.json",
      "complexity": 4,
      "calls": "{'open', 'Path', 'load', 'exists', 'print'}",
      "called_by": "{'camera_manager.py:save_camera_config', 'camera_manager.py:connectToCamera'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:save_config": {
      "id": "camera_manager.py:save_config",
      "name": "save_config",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 46,
      "line_end": 52,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "config"
      ],
      "return_type": null,
      "docstring": "Guarda configuración en config.json",
      "complexity": 3,
      "calls": "{'open', 'print', 'dump'}",
      "called_by": "{'camera_manager.py:save_camera_config'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:_get_windows_cameras": {
      "id": "camera_manager.py:_get_windows_cameras",
      "name": "_get_windows_cameras",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 57,
      "line_end": 106,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Obtiene información de cámaras desde Windows usando PowerShell",
      "complexity": 12,
      "calls": "{'startswith', 'loads', 'group', 'strip', 'run', 'isinstance', 'get', 'print', 'search', 'append'}",
      "called_by": "{'camera_manager.py:scan_cameras', 'camera_manager.py:_find_camera_index_by_vidpid'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:_get_opencv_backends": {
      "id": "camera_manager.py:_get_opencv_backends",
      "name": "_get_opencv_backends",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 108,
      "line_end": 121,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Devuelve backends de OpenCV a probar según el sistema operativo",
      "complexity": 5,
      "calls": "{'startswith', 'append', 'hasattr'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:_try_open_camera": {
      "id": "camera_manager.py:_try_open_camera",
      "name": "_try_open_camera",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 123,
      "line_end": 139,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "index",
        "backend"
      ],
      "return_type": null,
      "docstring": "Intenta abrir una cámara en un índice con un backend específico",
      "complexity": 4,
      "calls": "{'read', 'release', 'isOpened', 'VideoCapture'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:scan_cameras": {
      "id": "camera_manager.py:scan_cameras",
      "name": "scan_cameras",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 187,
      "line_end": 208,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Escanea cámaras disponibles en el sistema.\nSOLO devuelve cámaras detectadas en Windows (confiables con VID:PID).\n\nReturns: [{name, vid, pid}]",
      "complexity": 5,
      "calls": "{'camera_manager.py:_get_windows_cameras', 'len', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:get_supported_resolutions": {
      "id": "camera_manager.py:get_supported_resolutions",
      "name": "get_supported_resolutions",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 213,
      "line_end": 259,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "vid",
        "pid"
      ],
      "return_type": null,
      "docstring": "Obtiene resoluciones soportadas para una cámara por VID:PID.\nReturns: [(width, height), ...]",
      "complexity": 9,
      "calls": "{'VideoCapture', 'release', 'int', 'isOpened', 'abs', 'set', 'get', 'print', 'camera_manager.py:_find_camera_index_by_vidpid', 'append'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:_uid_to_index": {
      "id": "camera_manager.py:_uid_to_index",
      "name": "_uid_to_index",
      "file_path": "backup\\camera_manager.py",
      "line_start": 300,
      "line_end": 306,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "uid"
      ],
      "return_type": null,
      "docstring": "Mapea UID a índice de cámara",
      "complexity": 3,
      "calls": "{'scan_cameras'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:connect_camera": {
      "id": "camera_manager.py:connect_camera",
      "name": "connect_camera",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 264,
      "line_end": 308,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "vid",
        "pid",
        "width",
        "height"
      ],
      "return_type": null,
      "docstring": "Conecta a una cámara por VID:PID.\nReturns: (success, error_message)",
      "complexity": 10,
      "calls": "{'camera_manager.py:disconnect_camera', 'release', 'read', 'VideoCapture', 'isOpened', 'set', 'print', 'camera_manager.py:_find_camera_index_by_vidpid'}",
      "called_by": "{'camera_manager.py:connectToCamera'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:disconnect_camera": {
      "id": "camera_manager.py:disconnect_camera",
      "name": "disconnect_camera",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 310,
      "line_end": 324,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Desconecta la cámara actual",
      "complexity": 4,
      "calls": "{'release', 'print'}",
      "called_by": "{'camera_manager.py:connect_camera'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:get_frame": {
      "id": "camera_manager.py:get_frame",
      "name": "get_frame",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 326,
      "line_end": 352,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Captura un frame de la cámara y lo devuelve como JPEG para video en vivo.\nReturns: JPEG bytes o None",
      "complexity": 10,
      "calls": "{'read', 'str', 'isOpened', 'tobytes', 'print', 'imencode'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:is_connected": {
      "id": "camera_manager.py:is_connected",
      "name": "is_connected",
      "file_path": "backup\\camera_manager.py",
      "line_start": 423,
      "line_end": 426,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Verifica si hay una cámara conectada",
      "complexity": 2,
      "calls": "set()",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:capturar_frame_limpio": {
      "id": "camera_manager.py:capturar_frame_limpio",
      "name": "capturar_frame_limpio",
      "file_path": "backup\\camera_manager.py",
      "line_start": 428,
      "line_end": 453,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Captura un frame LIMPIO de la cámara (RGB, sin overlays).\n\nEsta función es usada por el NUEVO pipeline de análisis.\n\nReturns:\n    numpy.ndarray: Frame RGB de OpenCV o None",
      "complexity": 8,
      "calls": "{'read', 'isOpened', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:auto_connect_from_config": {
      "id": "camera_manager.py:auto_connect_from_config",
      "name": "auto_connect_from_config",
      "file_path": "backup\\camera_manager.py",
      "line_start": 458,
      "line_end": 483,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Intenta conectar automáticamente usando config.json\nReturns: (success, message)",
      "complexity": 3,
      "calls": "{'load_config', 'connect_camera', 'get', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:save_camera_config": {
      "id": "camera_manager.py:save_camera_config",
      "name": "save_camera_config",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 413,
      "line_end": 430,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "vid",
        "pid",
        "name",
        "width",
        "height"
      ],
      "return_type": null,
      "docstring": "Guarda configuración de cámara en config.json por VID:PID",
      "complexity": 3,
      "calls": "{'camera_manager.py:load_config', 'print', 'camera_manager.py:save_config'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco.py:detect_aruco_by_id": {
      "id": "aruco.py:detect_aruco_by_id",
      "name": "detect_aruco_by_id",
      "file_path": "lib\\aruco.py",
      "line_start": 28,
      "line_end": 103,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "image",
        "target_id",
        "dictionary_id",
        "marker_bits",
        "marker_size_mm"
      ],
      "return_type": null,
      "docstring": "Detecta un marcador ArUco específico en la imagen y calcula calibración.\n\nArgs:\n    image: Imagen de OpenCV (numpy array)\n    target_id: ID del ArUco a buscar\n    dictionary_id: ID del diccionario ArUco (50, 100, 250, 1000)\n    marker_bits: Tamaño de matriz del marcador (4, 5, 6, 7)\n    marker_size_mm: Tamaño real del marcador en mm\n\nReturns:\n    Dict con {center, corners, id, px_per_mm, rotation_matrix, detected_ids} o None",
      "complexity": 8,
      "calls": "{'tolist', 'int', 'ArucoDetector', 'detectMarkers', 'enumerate', 'print_exc', 'aruco.py:get_dictionary_mapping', 'getPredefinedDictionary', 'DetectorParameters', 'norm', 'flatten', 'print', 'mean', 'float', 'array'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco.py:detect_all_arucos": {
      "id": "aruco.py:detect_all_arucos",
      "name": "detect_all_arucos",
      "file_path": "lib\\aruco.py",
      "line_start": 105,
      "line_end": 168,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "image",
        "dictionary_id",
        "marker_bits",
        "marker_size_mm"
      ],
      "return_type": null,
      "docstring": "Detecta TODOS los marcadores ArUco en la imagen.\n\nArgs:\n    image: Imagen de OpenCV (numpy array)\n    dictionary_id: ID del diccionario ArUco (50, 100, 250, 1000)\n    marker_bits: Tamaño de matriz del marcador (4, 5, 6, 7)\n    marker_size_mm: Tamaño real del marcador en mm\n\nReturns:\n    Dict con {detected_ids, markers} o None si no hay ArUcos",
      "complexity": 8,
      "calls": "{'tolist', 'int', 'detectMarkers', 'enumerate', 'aruco.py:get_dictionary_mapping', 'getPredefinedDictionary', 'DetectorParameters', 'norm', 'flatten', 'len', 'print', 'mean', 'float', 'append', 'ArucoDetector'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco.py:detect_arucos_with_config": {
      "id": "aruco.py:detect_arucos_with_config",
      "name": "detect_arucos_with_config",
      "file_path": "lib\\aruco.py",
      "line_start": 174,
      "line_end": 293,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "image",
        "aruco_configs",
        "dictionary_id",
        "marker_bits"
      ],
      "return_type": null,
      "docstring": "Detecta ArUcos en imagen usando configuración genérica.\n\nArgs:\n    image: Imagen de OpenCV (numpy array)\n    aruco_configs: Lista de configuraciones de ArUcos\n                  [{\"id\": int, \"name\": str, \"size_mm\": float, \"color\": tuple}]\n    dictionary_id: ID del diccionario ArUco (50, 100, 250, 1000)\n    marker_bits: Tamaño de matriz del marcador (4, 5, 6, 7)\n    \nReturns:\n    Diccionario con información de detección genérica",
      "complexity": 10,
      "calls": "{'tolist', 'int', 'detectMarkers', 'str', 'enumerate', 'getPredefinedDictionary', 'arctan2', 'norm', 'DetectorParameters', 'flatten', 'get', 'len', 'print', 'mean', 'float', 'append', 'ArucoDetector'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco.py:get_available_dictionaries": {
      "id": "aruco.py:get_available_dictionaries",
      "name": "get_available_dictionaries",
      "file_path": "lib\\aruco.py",
      "line_start": 299,
      "line_end": 306,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Devuelve diccionarios ArUco disponibles",
      "complexity": 1,
      "calls": "set()",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco.py:get_available_marker_sizes": {
      "id": "aruco.py:get_available_marker_sizes",
      "name": "get_available_marker_sizes",
      "file_path": "lib\\aruco.py",
      "line_start": 308,
      "line_end": 312,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Devuelve tamaños de matriz ArUco disponibles",
      "complexity": 1,
      "calls": "set()",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco.py:get_dictionary_mapping": {
      "id": "aruco.py:get_dictionary_mapping",
      "name": "get_dictionary_mapping",
      "file_path": "lib\\aruco.py",
      "line_start": 314,
      "line_end": 333,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Devuelve mapeo de (marker_bits, dictionary_id) a constantes OpenCV",
      "complexity": 1,
      "calls": "set()",
      "called_by": "{'aruco.py:detect_aruco_by_id', 'aruco.py:detect_all_arucos'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:__init__": {
      "id": "overlay.py:__init__",
      "name": "__init__",
      "file_path": "lib\\overlay.py",
      "line_start": 98,
      "line_end": 124,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Inicializar el gestor genérico de overlays.\n\nSolo define el marco \"world\" genérico. Los marcos específicos\ndel dominio deben definirse externamente usando frames_manager.py\no scripts similares.",
      "complexity": 1,
      "calls": "{'overlay.py:load_persistent_config', 'overlay.py:define_frame', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:define_frame": {
      "id": "overlay.py:define_frame",
      "name": "define_frame",
      "file_path": "lib\\overlay.py",
      "line_start": 130,
      "line_end": 155,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "name",
        "offset",
        "rotation",
        "px_per_mm",
        "parent_frame"
      ],
      "return_type": null,
      "docstring": "Definir un nuevo marco de coordenadas.\n\nArgs:\n    name: Nombre del marco\n    offset: Desplazamiento (x, y) respecto al marco padre\n    rotation: Rotación en radianes\n    px_per_mm: Relación píxeles por milímetro\n    parent_frame: Marco padre (default: \"world\")",
      "complexity": 2,
      "calls": "{'CoordinateFrame', 'print'}",
      "called_by": "{'overlay.py:__init__', 'overlay.py:load_config'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:update_frame": {
      "id": "overlay.py:update_frame",
      "name": "update_frame",
      "file_path": "lib\\overlay.py",
      "line_start": 157,
      "line_end": 178,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "name",
        "offset",
        "rotation"
      ],
      "return_type": null,
      "docstring": "Actualizar un marco de coordenadas existente.\n\nArgs:\n    name: Nombre del marco a actualizar\n    offset: Nuevo desplazamiento (opcional)\n    rotation: Nueva rotación en radianes (opcional)",
      "complexity": 4,
      "calls": "{'ValueError', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:get_frame": {
      "id": "overlay.py:get_frame",
      "name": "get_frame",
      "file_path": "lib\\overlay.py",
      "line_start": 180,
      "line_end": 184,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "name"
      ],
      "return_type": null,
      "docstring": "Obtener información de un marco",
      "complexity": 2,
      "calls": "{'ValueError'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:list_frames": {
      "id": "overlay.py:list_frames",
      "name": "list_frames",
      "file_path": "lib\\overlay.py",
      "line_start": 186,
      "line_end": 188,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Listar todos los marcos definidos",
      "complexity": 1,
      "calls": "{'list', 'keys'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:_transform_point": {
      "id": "overlay.py:_transform_point",
      "name": "_transform_point",
      "file_path": "lib\\overlay.py",
      "line_start": 194,
      "line_end": 251,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "point",
        "from_frame",
        "to_frame"
      ],
      "return_type": null,
      "docstring": "Transformar un punto entre marcos de coordenadas.\n\nArgs:\n    point: Punto (x, y) a transformar\n    from_frame: Marco origen\n    to_frame: Marco destino\n    \nReturns:\n    Punto transformado (x, y)",
      "complexity": 3,
      "calls": "{'sin', 'float', 'array', 'cos'}",
      "called_by": "{'overlay.py:_transform_coordinates'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:_transform_coordinates": {
      "id": "overlay.py:_transform_coordinates",
      "name": "_transform_coordinates",
      "file_path": "lib\\overlay.py",
      "line_start": 253,
      "line_end": 282,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "coordinates",
        "from_frame",
        "to_frame"
      ],
      "return_type": null,
      "docstring": "Transformar todas las coordenadas de un objeto entre marcos.\n\nArgs:\n    coordinates: Diccionario con coordenadas del objeto\n    from_frame: Marco origen\n    to_frame: Marco destino\n    \nReturns:\n    Coordenadas transformadas",
      "complexity": 8,
      "calls": "{'all', 'items', 'isinstance', 'copy', 'len', 'overlay.py:_transform_point'}",
      "called_by": "{'overlay.py:get_object', 'overlay.py:render'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:add_line": {
      "id": "overlay.py:add_line",
      "name": "add_line",
      "file_path": "lib\\overlay.py",
      "line_start": 288,
      "line_end": 332,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "frame",
        "start",
        "end",
        "name",
        "color",
        "thickness",
        "units"
      ],
      "return_type": null,
      "docstring": "Agregar línea\n\nArgs:\n    frame: Marco de referencia\n    start: Punto inicio\n    end: Punto fin\n    name: Nombre único\n    color: Color del objeto\n    thickness: Grosor de línea\n    units: Unidades de las coordenadas (\"mm\" por defecto o \"px\")",
      "complexity": 6,
      "calls": "{'overlay.py:_parse_color', 'isinstance', 'print', 'DrawingObject', 'ValueError'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:add_circle": {
      "id": "overlay.py:add_circle",
      "name": "add_circle",
      "file_path": "lib\\overlay.py",
      "line_start": 334,
      "line_end": 379,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "frame",
        "center",
        "radius",
        "name",
        "color",
        "thickness",
        "filled",
        "units"
      ],
      "return_type": null,
      "docstring": "Agregar círculo\n\nArgs:\n    frame: Marco de referencia\n    center: Centro del círculo\n    radius: Radio del círculo\n    name: Nombre único\n    color: Color del objeto\n    thickness: Grosor de línea\n    filled: Si está relleno\n    units: Unidades de las coordenadas (\"mm\" o \"px\")",
      "complexity": 6,
      "calls": "{'overlay.py:_parse_color', 'isinstance', 'print', 'DrawingObject', 'ValueError'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:add_ellipse": {
      "id": "overlay.py:add_ellipse",
      "name": "add_ellipse",
      "file_path": "lib\\overlay.py",
      "line_start": 381,
      "line_end": 425,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "frame",
        "center",
        "axes",
        "angle",
        "name",
        "color",
        "thickness",
        "units"
      ],
      "return_type": null,
      "docstring": "Agregar elipse\n\nArgs:\n    frame: Marco de referencia\n    center: Centro de la elipse\n    axes: Ejes mayor y menor\n    angle: Ángulo de rotación\n    name: Nombre único\n    color: Color del objeto\n    thickness: Grosor de línea\n    units: Unidades de las coordenadas (\"mm\" o \"px\")",
      "complexity": 6,
      "calls": "{'overlay.py:_parse_color', 'isinstance', 'print', 'DrawingObject', 'ValueError'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:add_segment": {
      "id": "overlay.py:add_segment",
      "name": "add_segment",
      "file_path": "lib\\overlay.py",
      "line_start": 427,
      "line_end": 470,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "frame",
        "start",
        "end",
        "name",
        "color",
        "thickness",
        "units"
      ],
      "return_type": null,
      "docstring": "Agregar segmento (línea con puntos extremos)\n\nArgs:\n    frame: Marco de referencia\n    start: Punto inicio\n    end: Punto fin\n    name: Nombre único\n    color: Color del objeto\n    thickness: Grosor de línea\n    units: Unidades de las coordenadas (\"mm\" o \"px\")",
      "complexity": 6,
      "calls": "{'overlay.py:_parse_color', 'isinstance', 'print', 'DrawingObject', 'ValueError'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:add_text": {
      "id": "overlay.py:add_text",
      "name": "add_text",
      "file_path": "lib\\overlay.py",
      "line_start": 472,
      "line_end": 516,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "frame",
        "position",
        "text",
        "name",
        "color",
        "font_scale",
        "thickness",
        "units"
      ],
      "return_type": null,
      "docstring": "Agregar texto\n\nArgs:\n    frame: Marco de referencia\n    position: Posición del texto\n    text: Texto a mostrar\n    name: Nombre único\n    color: Color del texto\n    font_scale: Escala de fuente\n    thickness: Grosor de línea\n    units: Unidades de las coordenadas (\"mm\" o \"px\")",
      "complexity": 6,
      "calls": "{'overlay.py:_parse_color', 'isinstance', 'print', 'DrawingObject', 'ValueError'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:add_background": {
      "id": "overlay.py:add_background",
      "name": "add_background",
      "file_path": "lib\\overlay.py",
      "line_start": 518,
      "line_end": 528,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "name",
        "image_path",
        "adjust_container"
      ],
      "return_type": null,
      "docstring": "Agregar imagen de fondo desde archivo",
      "complexity": 3,
      "calls": "{'exists', 'print', 'imread', 'ValueError', 'FileNotFoundError'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:set_background": {
      "id": "overlay.py:set_background",
      "name": "set_background",
      "file_path": "lib\\overlay.py",
      "line_start": 530,
      "line_end": 536,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "name",
        "image"
      ],
      "return_type": null,
      "docstring": "Establecer imagen de fondo desde array numpy",
      "complexity": 2,
      "calls": "{'copy', 'ValueError', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:get_object": {
      "id": "overlay.py:get_object",
      "name": "get_object",
      "file_path": "lib\\overlay.py",
      "line_start": 542,
      "line_end": 570,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "target_frame",
        "name"
      ],
      "return_type": null,
      "docstring": "Obtener objeto transformado a un marco específico.\n\nArgs:\n    target_frame: Marco destino para las coordenadas\n    name: Nombre del objeto\n    \nReturns:\n    Diccionario con el objeto transformado",
      "complexity": 2,
      "calls": "{'overlay.py:_transform_coordinates', 'copy', 'ValueError'}",
      "called_by": "{'overlay.py:get_coordinates'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:get_coordinates": {
      "id": "overlay.py:get_coordinates",
      "name": "get_coordinates",
      "file_path": "lib\\overlay.py",
      "line_start": 572,
      "line_end": 592,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "target_frame",
        "name",
        "point"
      ],
      "return_type": null,
      "docstring": "Obtener coordenadas específicas de un objeto.\n\nArgs:\n    target_frame: Marco destino\n    name: Nombre del objeto\n    point: Punto específico ('start', 'end', 'center', etc.)\n    \nReturns:\n    Coordenadas del punto o todo el diccionario de coordenadas",
      "complexity": 3,
      "calls": "{'overlay.py:get_object', 'ValueError'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:get_properties": {
      "id": "overlay.py:get_properties",
      "name": "get_properties",
      "file_path": "lib\\overlay.py",
      "line_start": 594,
      "line_end": 599,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "name"
      ],
      "return_type": null,
      "docstring": "Obtener propiedades de un objeto",
      "complexity": 2,
      "calls": "{'copy', 'ValueError'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:get_object_original_frame": {
      "id": "overlay.py:get_object_original_frame",
      "name": "get_object_original_frame",
      "file_path": "lib\\overlay.py",
      "line_start": 601,
      "line_end": 606,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "name"
      ],
      "return_type": null,
      "docstring": "Obtener marco original de un objeto",
      "complexity": 2,
      "calls": "{'ValueError'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:list_objects": {
      "id": "overlay.py:list_objects",
      "name": "list_objects",
      "file_path": "lib\\overlay.py",
      "line_start": 608,
      "line_end": 610,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Listar todos los objetos",
      "complexity": 1,
      "calls": "{'list', 'keys'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:list_objects_by_original_frame": {
      "id": "overlay.py:list_objects_by_original_frame",
      "name": "list_objects_by_original_frame",
      "file_path": "lib\\overlay.py",
      "line_start": 612,
      "line_end": 614,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "frame"
      ],
      "return_type": null,
      "docstring": "Listar objetos por marco original",
      "complexity": 1,
      "calls": "{'items'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:create_renderlist": {
      "id": "overlay.py:create_renderlist",
      "name": "create_renderlist",
      "file_path": "lib\\overlay.py",
      "line_start": 620,
      "line_end": 646,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Crear lista de renderizado.\n\nArgs:\n    *object_names: Nombres de objetos a incluir\n    name: Nombre de la renderlist (opcional)\n    \nReturns:\n    Nombre de la renderlist creada",
      "complexity": 5,
      "calls": "{'ValueError', 'len', 'print', 'list'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:get_renderlist": {
      "id": "overlay.py:get_renderlist",
      "name": "get_renderlist",
      "file_path": "lib\\overlay.py",
      "line_start": 648,
      "line_end": 653,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "name"
      ],
      "return_type": null,
      "docstring": "Obtener objetos de una renderlist",
      "complexity": 2,
      "calls": "{'copy', 'ValueError'}",
      "called_by": "{'overlay.py:render'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:list_renderlists": {
      "id": "overlay.py:list_renderlists",
      "name": "list_renderlists",
      "file_path": "lib\\overlay.py",
      "line_start": 655,
      "line_end": 657,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "return_type": null,
      "docstring": "Listar todas las renderlists",
      "complexity": 1,
      "calls": "{'list', 'keys'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:render": {
      "id": "overlay.py:render",
      "name": "render",
      "file_path": "lib\\overlay.py",
      "line_start": 663,
      "line_end": 709,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "background_image",
        "renderlist",
        "show_frames",
        "view_time"
      ],
      "return_type": null,
      "docstring": "Renderizar overlays sobre imagen de fondo.\n\nArgs:\n    background_image: Imagen de fondo\n    renderlist: Lista de objetos a renderizar (str o List[str])\n    show_frames: Marcos a mostrar (opcional)\n    view_time: Tiempo de visualización en ms\n    \nReturns:\n    Tupla (imagen_renderizada, view_time)",
      "complexity": 5,
      "calls": "{'overlay.py:_transform_coordinates', 'overlay.py:_draw_object', 'isinstance', 'keys', 'list', 'copy', 'len', 'print', 'overlay.py:get_renderlist'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:_draw_object": {
      "id": "overlay.py:_draw_object",
      "name": "_draw_object",
      "file_path": "lib\\overlay.py",
      "line_start": 711,
      "line_end": 744,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "image",
        "obj_type",
        "coordinates",
        "properties"
      ],
      "return_type": null,
      "docstring": "Dibujar objeto específico en la imagen",
      "complexity": 7,
      "calls": "{'int', 'polylines', 'line', 'circle', 'ellipse', 'tuple', 'putText', 'map', 'array'}",
      "called_by": "{'overlay.py:render'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:_parse_color": {
      "id": "overlay.py:_parse_color",
      "name": "_parse_color",
      "file_path": "lib\\overlay.py",
      "line_start": 750,
      "line_end": 767,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "color_str"
      ],
      "return_type": null,
      "docstring": "Convertir string de color a BGR",
      "complexity": 2,
      "calls": "{'lower', 'print'}",
      "called_by": "{'overlay.py:add_polygon', 'overlay.py:add_ellipse', 'overlay.py:add_text', 'overlay.py:add_circle', 'overlay.py:add_segment', 'overlay.py:add_line'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:save_config": {
      "id": "overlay.py:save_config",
      "name": "save_config",
      "file_path": "lib\\overlay.py",
      "line_start": 769,
      "line_end": 791,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "filepath"
      ],
      "return_type": null,
      "docstring": "Guardar configuración a archivo JSON",
      "complexity": 2,
      "calls": "{'open', 'items', 'print', 'dump'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:save_persistent_config": {
      "id": "overlay.py:save_persistent_config",
      "name": "save_persistent_config",
      "file_path": "lib\\overlay.py",
      "line_start": 793,
      "line_end": 812,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "filepath"
      ],
      "return_type": null,
      "docstring": "Guardar configuración persistente",
      "complexity": 2,
      "calls": "{'open', 'items', 'print', 'dump'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:load_config": {
      "id": "overlay.py:load_config",
      "name": "load_config",
      "file_path": "lib\\overlay.py",
      "line_start": 814,
      "line_end": 849,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "filepath"
      ],
      "return_type": null,
      "docstring": "Cargar configuración desde archivo JSON",
      "complexity": 5,
      "calls": "{'open', 'items', 'load', 'ObjectType', 'get', 'exists', 'print', 'DrawingObject', 'overlay.py:define_frame'}",
      "called_by": "{'overlay.py:load_persistent_config'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:load_persistent_config": {
      "id": "overlay.py:load_persistent_config",
      "name": "load_persistent_config",
      "file_path": "lib\\overlay.py",
      "line_start": 851,
      "line_end": 857,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "filepath"
      ],
      "return_type": null,
      "docstring": "Cargar configuración persistente al inicializar",
      "complexity": 2,
      "calls": "{'exists', 'print', 'overlay.py:load_config'}",
      "called_by": "{'overlay.py:__init__'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "overlay.py:add_polygon": {
      "id": "overlay.py:add_polygon",
      "name": "add_polygon",
      "file_path": "lib\\overlay.py",
      "line_start": 862,
      "line_end": 903,
      "is_method": true,
      "is_async": false,
      "parameters": [
        "self",
        "frame",
        "points",
        "name",
        "color",
        "thickness",
        "units"
      ],
      "return_type": null,
      "docstring": "Agregar polígono (contorno)\n\nArgs:\n    frame: Marco de referencia\n    points: Lista de puntos del polígono\n    name: Nombre único\n    color: Color del objeto\n    thickness: Grosor de línea\n    units: Unidades de las coordenadas (\"mm\" o \"px\")",
      "complexity": 6,
      "calls": "{'overlay.py:_parse_color', 'isinstance', 'print', 'DrawingObject', 'ValueError'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:detect_arucos_in_image": {
      "id": "aruco_manager.py:detect_arucos_in_image",
      "name": "detect_arucos_in_image",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 36,
      "line_end": 98,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "image",
        "frame_aruco_id",
        "tool_aruco_id",
        "frame_marker_size_mm",
        "tool_marker_size_mm",
        "dictionary_id",
        "marker_bits"
      ],
      "return_type": null,
      "docstring": "Detectar ArUcos en imagen usando configuración específica del proyecto.\n\nArgs:\n    image: Imagen en escala de grises\n    frame_aruco_id: ID del ArUco Frame\n    tool_aruco_id: ID del ArUco Tool\n    frame_marker_size_mm: Tamaño del marcador frame en mm\n    tool_marker_size_mm: Tamaño del marcador tool en mm\n    dictionary_id: ID del diccionario ArUco\n    marker_bits: Tamaño de la matriz del marcador\n    \nReturns:\n    Diccionario con información de detección específica del proyecto",
      "complexity": 2,
      "calls": "{'detect_arucos_with_config', 'get', 'print', 'str'}",
      "called_by": "{'aruco_manager.py:save_aruco_configuration', 'aruco_manager.py:render_overlay_with_arucos'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:create_temp_frames_from_arucos": {
      "id": "aruco_manager.py:create_temp_frames_from_arucos",
      "name": "create_temp_frames_from_arucos",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 100,
      "line_end": 134,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "overlay_manager",
        "detection_result"
      ],
      "return_type": null,
      "docstring": "Crear marcos temporales específicos del proyecto basados en detección de ArUcos.\n\nArgs:\n    overlay_manager: Instancia de OverlayManager del proyecto\n    detection_result: Resultado de detect_arucos_in_image()",
      "complexity": 3,
      "calls": "{'define_frame', 'get', 'print'}",
      "called_by": "{'aruco_manager.py:save_aruco_configuration', 'aruco_manager.py:render_overlay_with_arucos'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:clear_aruco_objects": {
      "id": "aruco_manager.py:clear_aruco_objects",
      "name": "clear_aruco_objects",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 136,
      "line_end": 158,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "overlay_manager"
      ],
      "return_type": null,
      "docstring": "Limpiar todos los objetos de ArUcos y centro del troquel existentes.\n\nArgs:\n    overlay_manager: Instancia de OverlayManager del proyecto",
      "complexity": 7,
      "calls": "{'startswith', 'items', 'keys', 'list', 'len', 'print', 'append'}",
      "called_by": "{'aruco_manager.py:render_overlay_with_arucos'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:create_aruco_overlay_objects": {
      "id": "aruco_manager.py:create_aruco_overlay_objects",
      "name": "create_aruco_overlay_objects",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 160,
      "line_end": 250,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "overlay_manager",
        "detection_result"
      ],
      "return_type": null,
      "docstring": "Crear objetos de overlay específicos del proyecto para ArUcos detectados.\n\nArgs:\n    overlay_manager: Instancia de OverlayManager del proyecto\n    detection_result: Resultado de detect_arucos_in_image()",
      "complexity": 4,
      "calls": "{'sin', 'items', 'add_line', 'cos', 'get', 'add_circle', 'add_polygon', 'print'}",
      "called_by": "{'aruco_manager.py:save_aruco_configuration', 'aruco_manager.py:render_overlay_with_arucos'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:create_center_reference": {
      "id": "aruco_manager.py:create_center_reference",
      "name": "create_center_reference",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 252,
      "line_end": 280,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "overlay_manager",
        "center_x",
        "center_y",
        "show_base",
        "base_detected"
      ],
      "return_type": null,
      "docstring": "Crear centro del troquel usando coordenadas dinámicas.\n\nArgs:\n    overlay_manager: Instancia de OverlayManager del proyecto\n    center_x: Coordenada X del centro en mm\n    center_y: Coordenada Y del centro en mm\n    show_base: Si el Base ArUco está habilitado\n    base_detected: Si el Base ArUco fue detectado",
      "complexity": 3,
      "calls": "{'add_circle', 'print'}",
      "called_by": "{'aruco_manager.py:save_aruco_configuration', 'aruco_manager.py:render_overlay_with_arucos'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:create_renderlist": {
      "id": "aruco_manager.py:create_renderlist",
      "name": "create_renderlist",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 282,
      "line_end": 296,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "overlay_manager",
        "overlay_objects"
      ],
      "return_type": null,
      "docstring": "Crear lista de renderizado con objetos habilitados.\n\nArgs:\n    overlay_manager: Instancia de OverlayManager del proyecto\n    overlay_objects: Lista de objetos a renderizar\n    \nReturns:\n    Nombre de la renderlist creada",
      "complexity": 1,
      "calls": "{'aruco_manager.py:create_renderlist', 'len', 'print'}",
      "called_by": "{'aruco_manager.py:create_renderlist', 'aruco_manager.py:render_overlay_with_arucos'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:save_aruco_configuration": {
      "id": "aruco_manager.py:save_aruco_configuration",
      "name": "save_aruco_configuration",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 298,
      "line_end": 364,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "overlay_manager",
        "cv2_frame",
        "aruco_config"
      ],
      "return_type": null,
      "docstring": "Guardar configuración de ArUcos y objetos de renderizado persistentes.\n\nArgs:\n    overlay_manager: Instancia de OverlayManager del proyecto\n    cv2_frame: Frame actual de la cámara\n    aruco_config: Configuración de ArUcos desde config.json\n    \nReturns:\n    Dict con información del guardado",
      "complexity": 6,
      "calls": "{'startswith', 'aruco_manager.py:is_frame_detected', 'items', 'aruco_manager.py:create_aruco_overlay_objects', 'extend', 'aruco_manager.py:is_tool_detected', 'aruco_manager.py:create_center_reference', 'get', 'len', 'print', 'aruco_manager.py:create_temp_frames_from_arucos', 'append', 'aruco_manager.py:detect_arucos_in_image'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:get_frame_aruco_info": {
      "id": "aruco_manager.py:get_frame_aruco_info",
      "name": "get_frame_aruco_info",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 370,
      "line_end": 374,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "detection_result"
      ],
      "return_type": null,
      "docstring": "Obtiene información específica del ArUco Frame",
      "complexity": 1,
      "calls": "{'get'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:get_tool_aruco_info": {
      "id": "aruco_manager.py:get_tool_aruco_info",
      "name": "get_tool_aruco_info",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 376,
      "line_end": 380,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "detection_result"
      ],
      "return_type": null,
      "docstring": "Obtiene información específica del ArUco Tool",
      "complexity": 1,
      "calls": "{'get'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:is_frame_detected": {
      "id": "aruco_manager.py:is_frame_detected",
      "name": "is_frame_detected",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 382,
      "line_end": 384,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "detection_result"
      ],
      "return_type": null,
      "docstring": "Verifica si el ArUco Frame fue detectado",
      "complexity": 1,
      "calls": "{'get'}",
      "called_by": "{'aruco_manager.py:save_aruco_configuration', 'aruco_manager.py:render_overlay_with_arucos'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:is_tool_detected": {
      "id": "aruco_manager.py:is_tool_detected",
      "name": "is_tool_detected",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 386,
      "line_end": 388,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "detection_result"
      ],
      "return_type": null,
      "docstring": "Verifica si el ArUco Tool fue detectado",
      "complexity": 1,
      "calls": "{'get'}",
      "called_by": "{'aruco_manager.py:save_aruco_configuration', 'aruco_manager.py:render_overlay_with_arucos'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:get_available_dictionaries": {
      "id": "aruco_manager.py:get_available_dictionaries",
      "name": "get_available_dictionaries",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 394,
      "line_end": 396,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Devuelve diccionarios ArUco disponibles (wrapper de la librería genérica)",
      "complexity": 1,
      "calls": "{'aruco_manager.py:get_available_dictionaries'}",
      "called_by": "{'aruco_manager.py:get_available_dictionaries'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:get_available_marker_sizes": {
      "id": "aruco_manager.py:get_available_marker_sizes",
      "name": "get_available_marker_sizes",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 398,
      "line_end": 400,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Devuelve tamaños de matriz ArUco disponibles (wrapper de la librería genérica)",
      "complexity": 1,
      "calls": "{'aruco_manager.py:get_available_marker_sizes'}",
      "called_by": "{'aruco_manager.py:get_available_marker_sizes'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "aruco_manager.py:render_overlay_with_arucos": {
      "id": "aruco_manager.py:render_overlay_with_arucos",
      "name": "render_overlay_with_arucos",
      "file_path": "src\\vision\\aruco_manager.py",
      "line_start": 402,
      "line_end": 480,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "overlay_manager",
        "cv2_frame",
        "frame_aruco_id",
        "tool_aruco_id",
        "frame_marker_size",
        "tool_marker_size",
        "center_x",
        "center_y",
        "show_frame",
        "show_tool",
        "show_center"
      ],
      "return_type": null,
      "docstring": "Renderizar overlay con ArUcos detectados - función principal para el endpoint /api/overlay/render\n\nArgs:\n    overlay_manager: Instancia global de OverlayManager\n    cv2_frame: Frame de la cámara\n    frame_aruco_id: ID del ArUco Frame\n    tool_aruco_id: ID del ArUco Tool\n    frame_marker_size: Tamaño del marcador frame en mm\n    tool_marker_size: Tamaño del marcador tool en mm\n    center_x: Coordenada X del centro del troquel en mm\n    center_y: Coordenada Y del centro del troquel en mm\n    show_frame: Mostrar ArUco Frame\n    show_tool: Mostrar ArUco Tool\n    show_center: Mostrar centro del troquel\n    \nReturns:\n    Dict con resultado del renderizado",
      "complexity": 13,
      "calls": "{'startswith', 'aruco_manager.py:is_frame_detected', 'str', 'aruco_manager.py:clear_aruco_objects', 'items', 'aruco_manager.py:create_aruco_overlay_objects', 'extend', 'aruco_manager.py:is_tool_detected', 'aruco_manager.py:create_renderlist', 'aruco_manager.py:create_center_reference', 'aruco_manager.py:create_temp_frames_from_arucos', 'print', 'append', 'aruco_manager.py:detect_arucos_in_image'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:_find_camera_index_by_vidpid": {
      "id": "camera_manager.py:_find_camera_index_by_vidpid",
      "name": "_find_camera_index_by_vidpid",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 141,
      "line_end": 182,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "target_vid",
        "target_pid",
        "max_index"
      ],
      "return_type": null,
      "docstring": "Busca el índice de OpenCV de una cámara por VID:PID.\nReturns: índice de la cámara o None si no la encuentra",
      "complexity": 11,
      "calls": "{'VideoCapture', 'release', 'read', 'enumerate', 'camera_manager.py:_get_windows_cameras', 'isOpened', 'range', 'print'}",
      "called_by": "{'camera_manager.py:connect_camera', 'camera_manager.py:get_supported_resolutions'}",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:get_frame_raw": {
      "id": "camera_manager.py:get_frame_raw",
      "name": "get_frame_raw",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 354,
      "line_end": 376,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Captura un frame de la cámara y lo devuelve en formato OpenCV (numpy array).\nReturns: numpy array (BGR) o None",
      "complexity": 9,
      "calls": "{'read', 'isOpened', 'str', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "camera_manager.py:connectToCamera": {
      "id": "camera_manager.py:connectToCamera",
      "name": "connectToCamera",
      "file_path": "src\\vision\\camera_manager.py",
      "line_start": 381,
      "line_end": 411,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Lee config.json e intenta conectarse a la cámara guardada por VID:PID.\nReturns: (success, message)",
      "complexity": 4,
      "calls": "{'get', 'camera_manager.py:connect_camera', 'print', 'camera_manager.py:load_config'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "frames_manager.py:load_frames_config": {
      "id": "frames_manager.py:load_frames_config",
      "name": "load_frames_config",
      "file_path": "src\\vision\\frames_manager.py",
      "line_start": 33,
      "line_end": 56,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "config_path"
      ],
      "return_type": null,
      "docstring": "Cargar configuración de marcos desde archivo JSON.\n\nArgs:\n    config_path: Ruta al archivo JSON de configuración\n    \nReturns:\n    Diccionario con la configuración de marcos\n    \nRaises:\n    FileNotFoundError: Si el archivo no existe\n    json.JSONDecodeError: Si el JSON es inválido",
      "complexity": 4,
      "calls": "{'open', 'load', 'exists', 'ValueError', 'FileNotFoundError'}",
      "called_by": "{'frames_manager.py:init_global_frames'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "frames_manager.py:init_global_frames": {
      "id": "frames_manager.py:init_global_frames",
      "name": "init_global_frames",
      "file_path": "src\\vision\\frames_manager.py",
      "line_start": 59,
      "line_end": 93,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "config_path"
      ],
      "return_type": null,
      "docstring": "Inicializar la instancia global de OverlayManager con marcos específicos del proyecto.\nLee dinámicamente los marcos desde el archivo JSON de configuración.\n\nArgs:\n    config_path: Ruta al archivo JSON de configuración\n    \nReturns:\n    Instancia global de OverlayManager",
      "complexity": 3,
      "calls": "{'frames_manager.py:load_frames_config', 'frames_manager.py:init_frames_from_config', 'OverlayManager', 'print', 'frames_manager.py:init_project_frames_default'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "frames_manager.py:get_global_overlay_manager": {
      "id": "frames_manager.py:get_global_overlay_manager",
      "name": "get_global_overlay_manager",
      "file_path": "src\\vision\\frames_manager.py",
      "line_start": 96,
      "line_end": 111,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Obtener la instancia global de OverlayManager.\n\nReturns:\n    Instancia global de OverlayManager\n    \nRaises:\n    RuntimeError: Si no se ha inicializado la instancia global",
      "complexity": 2,
      "calls": "{'RuntimeError'}",
      "called_by": "{'frames_manager.py:get_frame_info', 'frames_manager.py:add_line_to_frame', 'frames_manager.py:add_text_to_frame', 'frames_manager.py:add_circle_to_frame', 'frames_manager.py:render_global', 'frames_manager.py:list_project_frames', 'frames_manager.py:update_frame'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "frames_manager.py:init_frames_from_config": {
      "id": "frames_manager.py:init_frames_from_config",
      "name": "init_frames_from_config",
      "file_path": "src\\vision\\frames_manager.py",
      "line_start": 114,
      "line_end": 149,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "overlay_manager",
        "frames_config"
      ],
      "return_type": null,
      "docstring": "Inicializar marcos de referencia dinámicamente desde configuración JSON.\n\nArgs:\n    overlay_manager: Instancia de OverlayManager ya inicializada\n    frames_config: Diccionario con configuración de marcos desde JSON",
      "complexity": 3,
      "calls": "{'items', 'define_frame', 'get', 'print'}",
      "called_by": "{'frames_manager.py:init_project_frames_default', 'frames_manager.py:init_global_frames'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "frames_manager.py:init_project_frames_default": {
      "id": "frames_manager.py:init_project_frames_default",
      "name": "init_project_frames_default",
      "file_path": "src\\vision\\frames_manager.py",
      "line_start": 152,
      "line_end": 169,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "overlay_manager"
      ],
      "return_type": null,
      "docstring": "Inicializar marcos de referencia con configuración por defecto (fallback).\n\nArgs:\n    overlay_manager: Instancia de OverlayManager ya inicializada",
      "complexity": 1,
      "calls": "{'print', 'frames_manager.py:init_frames_from_config'}",
      "called_by": "{'frames_manager.py:init_global_frames'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "frames_manager.py:init_project_frames": {
      "id": "frames_manager.py:init_project_frames",
      "name": "init_project_frames",
      "file_path": "src\\vision\\frames_manager.py",
      "line_start": 172,
      "line_end": 221,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "overlay_manager"
      ],
      "return_type": null,
      "docstring": "Inicializar marcos de referencia específicos del proyecto COMAU-VISION.\n\nArgs:\n    overlay_manager: Instancia de OverlayManager ya inicializada",
      "complexity": 1,
      "calls": "{'define_frame', 'print'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "frames_manager.py:update_frame": {
      "id": "frames_manager.py:update_frame",
      "name": "update_frame",
      "file_path": "src\\vision\\frames_manager.py",
      "line_start": 224,
      "line_end": 251,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame_name",
        "offset",
        "rotation",
        "px_per_mm"
      ],
      "return_type": null,
      "docstring": "Actualizar cualquier marco con valores de calibración.\n\nArgs:\n    frame_name: Nombre del marco a actualizar\n    offset: Posición (x, y) en píxeles\n    rotation: Rotación en radianes\n    px_per_mm: Relación píxeles por milímetro",
      "complexity": 1,
      "calls": "{'define_frame', 'frames_manager.py:update_frame', 'frames_manager.py:get_global_overlay_manager', 'print'}",
      "called_by": "{'frames_manager.py:update_frame'}",
      "is_exported": false,
      "is_entry_point": true
    },
    "frames_manager.py:get_frame_info": {
      "id": "frames_manager.py:get_frame_info",
      "name": "get_frame_info",
      "file_path": "src\\vision\\frames_manager.py",
      "line_start": 254,
      "line_end": 276,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame_name"
      ],
      "return_type": null,
      "docstring": "Obtener información de un marco específico.\n\nArgs:\n    frame_name: Nombre del marco\n    \nReturns:\n    Diccionario con información del marco o None si no existe",
      "complexity": 2,
      "calls": "{'get_frame', 'frames_manager.py:get_global_overlay_manager'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "frames_manager.py:list_project_frames": {
      "id": "frames_manager.py:list_project_frames",
      "name": "list_project_frames",
      "file_path": "src\\vision\\frames_manager.py",
      "line_start": 279,
      "line_end": 292,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Listar todos los marcos específicos del proyecto.\nExcluye el marco 'world' que es genérico.\n    \nReturns:\n    Lista de nombres de marcos del proyecto",
      "complexity": 1,
      "calls": "{'frames_manager.py:get_global_overlay_manager', 'list_frames'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "frames_manager.py:add_line_to_frame": {
      "id": "frames_manager.py:add_line_to_frame",
      "name": "add_line_to_frame",
      "file_path": "src\\vision\\frames_manager.py",
      "line_start": 299,
      "line_end": 303,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame_name",
        "start",
        "end",
        "name",
        "color",
        "thickness"
      ],
      "return_type": null,
      "docstring": "Agregar línea a un marco específico usando la instancia global",
      "complexity": 1,
      "calls": "{'add_line', 'frames_manager.py:get_global_overlay_manager'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "frames_manager.py:add_circle_to_frame": {
      "id": "frames_manager.py:add_circle_to_frame",
      "name": "add_circle_to_frame",
      "file_path": "src\\vision\\frames_manager.py",
      "line_start": 306,
      "line_end": 310,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame_name",
        "center",
        "radius",
        "name",
        "color",
        "thickness",
        "filled"
      ],
      "return_type": null,
      "docstring": "Agregar círculo a un marco específico usando la instancia global",
      "complexity": 1,
      "calls": "{'add_circle', 'frames_manager.py:get_global_overlay_manager'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "frames_manager.py:add_text_to_frame": {
      "id": "frames_manager.py:add_text_to_frame",
      "name": "add_text_to_frame",
      "file_path": "src\\vision\\frames_manager.py",
      "line_start": 313,
      "line_end": 317,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame_name",
        "position",
        "text",
        "name",
        "color",
        "font_scale",
        "thickness"
      ],
      "return_type": null,
      "docstring": "Agregar texto a un marco específico usando la instancia global",
      "complexity": 1,
      "calls": "{'add_text', 'frames_manager.py:get_global_overlay_manager'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "frames_manager.py:render_global": {
      "id": "frames_manager.py:render_global",
      "name": "render_global",
      "file_path": "src\\vision\\frames_manager.py",
      "line_start": 320,
      "line_end": 323,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "background_image",
        "renderlist",
        "show_frames",
        "view_time"
      ],
      "return_type": null,
      "docstring": "Renderizar usando la instancia global",
      "complexity": 1,
      "calls": "{'render', 'frames_manager.py:get_global_overlay_manager'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": true
    },
    "opencv_config.py:configure_opencv": {
      "id": "opencv_config.py:configure_opencv",
      "name": "configure_opencv",
      "file_path": "src\\vision\\opencv_config.py",
      "line_start": 5,
      "line_end": 9,
      "is_method": false,
      "is_async": false,
      "parameters": [],
      "return_type": null,
      "docstring": "Configura OpenCV para suprimir warnings innecesarios",
      "complexity": 1,
      "calls": "set()",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "yolo_detector.py:load_model": {
      "id": "yolo_detector.py:load_model",
      "name": "load_model",
      "file_path": "src\\vision\\yolo_detector.py",
      "line_start": 40,
      "line_end": 93,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "model_type",
        "model_path"
      ],
      "return_type": null,
      "docstring": "Carga un modelo YOLO desde un archivo .pt\n\nArgs:\n    model_type: Tipo de modelo ('detection' o 'holes')\n    model_path: Path al archivo del modelo\n\nReturns:\n    True si se cargó correctamente, False en caso contrario",
      "complexity": 7,
      "calls": "{'print_exc', 'to', 'exists', 'print', 'is_available', 'YOLO'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "yolo_detector.py:is_model_loaded": {
      "id": "yolo_detector.py:is_model_loaded",
      "name": "is_model_loaded",
      "file_path": "src\\vision\\yolo_detector.py",
      "line_start": 95,
      "line_end": 97,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "model_type"
      ],
      "return_type": null,
      "docstring": "Verifica si un modelo específico está cargado",
      "complexity": 1,
      "calls": "{'get'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "yolo_detector.py:get_model_path": {
      "id": "yolo_detector.py:get_model_path",
      "name": "get_model_path",
      "file_path": "src\\vision\\yolo_detector.py",
      "line_start": 99,
      "line_end": 101,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "model_type"
      ],
      "return_type": null,
      "docstring": "Obtiene el path de un modelo específico",
      "complexity": 1,
      "calls": "{'get'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "yolo_detector.py:detect_gasket": {
      "id": "yolo_detector.py:detect_gasket",
      "name": "detect_gasket",
      "file_path": "src\\vision\\yolo_detector.py",
      "line_start": 113,
      "line_end": 198,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "conf_threshold"
      ],
      "return_type": null,
      "docstring": "Detecta la junta completa y devuelve su bounding box.\nCompatible con YOLO normal (xyxy) y YOLO-OBB (xywhr).\n\nArgs:\n    frame: Frame de OpenCV\n    conf_threshold: Umbral de confianza\n\nReturns:\n    Para YOLO normal: (x1, y1, x2, y2)\n    Para YOLO-OBB: {'type': 'obb', 'center': (x, y), 'size': (w, h), 'angle': angle, 'points': pts, 'bbox': (x1, y1, x2, y2)}\n    None si no se detecta",
      "complexity": 14,
      "calls": "{'min', 'int', 'max', 'tolist', 'degrees', 'cpu', 'numpy', 'int0', 'boxPoints', 'len', 'print', 'hasattr', 'float', 'map'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "yolo_detector.py:detect_gasket_with_mask": {
      "id": "yolo_detector.py:detect_gasket_with_mask",
      "name": "detect_gasket_with_mask",
      "file_path": "src\\vision\\yolo_detector.py",
      "line_start": 201,
      "line_end": 253,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "conf_threshold"
      ],
      "return_type": null,
      "docstring": "Detecta la junta completa y devuelve su bounding box y máscara de segmentación.\n\nArgs:\n    frame: Frame de OpenCV\n    conf_threshold: Umbral de confianza\n\nReturns:\n    ((x1, y1, x2, y2), mask) o None si no se detecta\n    mask es un array numpy binario del tamaño del frame",
      "complexity": 10,
      "calls": "{'astype', 'cpu', 'zeros', 'numpy', 'len', 'print', 'hasattr', 'map', 'resize'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "yolo_detector.py:detect_holes": {
      "id": "yolo_detector.py:detect_holes",
      "name": "detect_holes",
      "file_path": "src\\vision\\yolo_detector.py",
      "line_start": 258,
      "line_end": 315,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "conf_threshold"
      ],
      "return_type": null,
      "docstring": "Detecta agujeros en el frame usando YOLO y calcula sus centros geométricos.\n\nArgs:\n    frame: Frame de OpenCV (numpy array)\n    conf_threshold: Umbral de confianza (default: 0.5)\n\nReturns:\n    Lista de centros [(x1, y1), (x2, y2), ...]",
      "complexity": 10,
      "calls": "{'int', 'max', 'astype', 'cpu', 'findContours', 'moments', 'numpy', 'print', 'append', 'resize'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    },
    "yolo_detector.py:detect_holes_bboxes": {
      "id": "yolo_detector.py:detect_holes_bboxes",
      "name": "detect_holes_bboxes",
      "file_path": "src\\vision\\yolo_detector.py",
      "line_start": 320,
      "line_end": 376,
      "is_method": false,
      "is_async": false,
      "parameters": [
        "frame",
        "conf_threshold"
      ],
      "return_type": null,
      "docstring": "Detecta agujeros usando YOLO y retorna SOLO bounding boxes.\n\nNUEVO ENFOQUE MODULAR:\n- YOLO solo hace localización (bboxes)\n- NO hace refinamiento con OpenCV\n- El refinamiento se delega a pipeline_analisis.calcular_centro_agujero()\n\nEsta función es simple y hace UNA sola cosa: detectar ubicaciones.\n\nArgs:\n    frame: Frame de OpenCV (numpy array)\n    conf_threshold: Umbral de confianza (default: 0.5)\n\nReturns:\n    list: [{'bbox': (x1, y1, x2, y2)}, ...]\n    Lista vacía si no se detecta nada",
      "complexity": 12,
      "calls": "{'cpu', 'numpy', 'len', 'print', 'hasattr', 'append', 'map'}",
      "called_by": "set()",
      "is_exported": false,
      "is_entry_point": false
    }
  },
  "orphaned_functions": [
    "contornos_analyzer.py:analizar_imagen_completa",
    "contornos_analyzer.py:crear_visualizacion",
    "elementos_utils.py:calcular_centros_muescas",
    "elementos_utils.py:extraer_datos_elementos_form",
    "elementos_utils.py:extraer_datos_elementos_json",
    "elementos_utils.py:obtener_datos_elementos_para_renderizar",
    "muescas_renderer.py:dibujar_muescas",
    "muescas_renderer.py:calcular_punto_medio_segmento",
    "pipeline_analisis.py:analizar_con_reintentos",
    "pipeline_analisis.py:aplicar_correccion_perspectiva_a_puntos",
    "textos_renderer.py:dibujar_texto_simple",
    "validaciones_geometricas.py:validar_todo",
    "visualizador.py:dibujar_todo",
    "visualizador.py:_dibujar_linea_offset",
    "camera_manager.py:_get_opencv_backends",
    "camera_manager.py:_try_open_camera",
    "camera_manager.py:scan_cameras",
    "camera_manager.py:get_supported_resolutions",
    "camera_manager.py:_uid_to_index",
    "camera_manager.py:get_frame",
    "camera_manager.py:is_connected",
    "camera_manager.py:capturar_frame_limpio",
    "camera_manager.py:auto_connect_from_config",
    "camera_manager.py:save_camera_config",
    "aruco.py:detect_aruco_by_id",
    "aruco.py:detect_all_arucos",
    "aruco.py:detect_arucos_with_config",
    "aruco.py:get_available_dictionaries",
    "aruco.py:get_available_marker_sizes",
    "overlay.py:__init__",
    "overlay.py:update_frame",
    "overlay.py:get_frame",
    "overlay.py:list_frames",
    "overlay.py:add_line",
    "overlay.py:add_circle",
    "overlay.py:add_ellipse",
    "overlay.py:add_segment",
    "overlay.py:add_text",
    "overlay.py:add_background",
    "overlay.py:set_background",
    "overlay.py:get_coordinates",
    "overlay.py:get_properties",
    "overlay.py:get_object_original_frame",
    "overlay.py:list_objects",
    "overlay.py:list_objects_by_original_frame",
    "overlay.py:create_renderlist",
    "overlay.py:list_renderlists",
    "overlay.py:render",
    "overlay.py:save_config",
    "overlay.py:save_persistent_config",
    "overlay.py:add_polygon",
    "aruco_manager.py:save_aruco_configuration",
    "aruco_manager.py:get_frame_aruco_info",
    "aruco_manager.py:get_tool_aruco_info",
    "aruco_manager.py:render_overlay_with_arucos",
    "camera_manager.py:get_frame_raw",
    "camera_manager.py:connectToCamera",
    "opencv_config.py:configure_opencv",
    "yolo_detector.py:load_model",
    "yolo_detector.py:is_model_loaded",
    "yolo_detector.py:get_model_path",
    "yolo_detector.py:detect_gasket",
    "yolo_detector.py:detect_gasket_with_mask",
    "yolo_detector.py:detect_holes",
    "yolo_detector.py:detect_holes_bboxes"
  ],
  "entry_points": [
    "code_analyzer.py:_map_dependencies",
    "COMAU.py:get_comau_manager",
    "COMAU.py:execute_key_sequence_with_instr_check",
    "COMAU_variables.py:create_word_command",
    "COMAU_variables.py:__str__",
    "illinois-server.py:api_connect_cam",
    "mqtt_manager.py:get_mqtt_manager",
    "illinois-server.py:load_config",
    "COMAU_variables.py:__init__",
    "illinois-server.py:load_aruco_config",
    "mqtt_manager.py:on_connect",
    "COMAU_variables.py:create_move_to_home_sequence",
    "COMAU_variables.py:_register_system_variables",
    "mqtt_manager.py:_process_response_message",
    "code_analyzer.py:_identify_entry_points",
    "frames_manager.py:init_project_frames",
    "mqtt_manager.py:start",
    "mqtt_manager.py:publish",
    "COMAU.py:get_available_routines",
    "illinois-server.py:video_feed",
    "mqtt_manager.py:disconnect",
    "COMAU_variables.py:create_set_coordinates_sequence",
    "code_analyzer.py:_find_orphaned_functions",
    "frames_manager.py:load_frames_config",
    "COMAU.py:set_fmi_zero",
    "illinois-server.py:save_aruco_config",
    "COMAU_variables.py:create_test_routine_sequence",
    "illinois-server.py:save_config",
    "code_analyzer.py:__init__",
    "illinois-server.py:api_status",
    "code_analyzer.py:_analyze_file",
    "COMAU_variables.py:validate_variable_value",
    "illinois-server.py:serve_static",
    "mqtt_manager.py:_update_mqtt_icon_status",
    "illinois-server.py:close_chrome",
    "frames_manager.py:init_global_frames",
    "frames_manager.py:get_frame_info",
    "COMAU_variables.py:validate_value",
    "code_analyzer.py:_find_function_by_name",
    "COMAU_variables.py:create_command_with_sequence_and_params",
    "COMAU_variables.py:get_variables_by_type",
    "mqtt_manager.py:__init__",
    "COMAU.py:__init__",
    "COMAU.py:_load_predefined_routines",
    "illinois-server.py:api_get_resolutions",
    "COMAU.py:execute_routine",
    "mqtt_manager.py:stop",
    "COMAU_variables.py:get_variable_by_name",
    "mqtt_manager.py:_load_config",
    "code_analyzer.py:_generate_cleanup_suggestions",
    "code_analyzer.py:_analyze_functions",
    "mqtt_manager.py:send_command_and_wait",
    "COMAU_variables.py:generate_sequence_id",
    "mqtt_manager.py:save_config",
    "code_analyzer.py:analyze_project",
    "COMAU_variables.py:create_execute_robot_command_sequence",
    "mqtt_manager.py:_on_disconnect",
    "frames_manager.py:add_line_to_frame",
    "illinois-server.py:serve_juntas_analisis",
    "COMAU_variables.py:get_command_string",
    "code_analyzer.py:_calculate_complexity",
    "illinois-server.py:api_aruco_save_config",
    "illinois-server.py:save_juntas",
    "code_analyzer.py:_find_python_files",
    "illinois-server.py:api_overlay_render",
    "mqtt_manager.py:_process_keyboard_message",
    "COMAU_variables.py:create_set_variable_sequence",
    "illinois-server.py:serve_imagenes_juntas",
    "illinois-server.py:serve_template",
    "illinois-server.py:api_aruco_set_reference",
    "COMAU.py:validate_sequence",
    "COMAU_variables.py:create_command_with_sequence",
    "COMAU.py:clear_errors",
    "illinois-server.py:launch_chrome",
    "mqtt_manager.py:state",
    "COMAU.py:_get_clear_errors_sequence",
    "frames_manager.py:add_text_to_frame",
    "frames_manager.py:init_frames_from_config",
    "COMAU.py:move_to_home",
    "illinois-server.py:run_flask",
    "frames_manager.py:update_frame",
    "COMAU.py:start_program",
    "COMAU.py:add_custom_routine",
    "mqtt_manager.py:_set_state",
    "mqtt_manager.py:wait_for_response",
    "illinois-server.py:generate",
    "illinois-server.py:api_scan_cameras",
    "code_analyzer.py:main",
    "COMAU_variables.py:register_variable",
    "frames_manager.py:add_circle_to_frame",
    "COMAU_variables.py:get_all_variables",
    "COMAU_variables.py:create_hello_command_sequence",
    "COMAU.py:_get_set_fmi_zero_sequence",
    "illinois-server.py:main",
    "mqtt_manager.py:unsubscribe",
    "mqtt_manager.py:is_running",
    "frames_manager.py:list_project_frames",
    "code_analyzer.py:__post_init__",
    "mqtt_manager.py:subscribe",
    "COMAU.py:_get_reset_robot_sequence",
    "mqtt_manager.py:connected",
    "code_analyzer.py:_find_function_calls",
    "frames_manager.py:render_global",
    "code_analyzer.py:_is_exported",
    "frames_manager.py:get_global_overlay_manager",
    "code_analyzer.py:_analyze_imports",
    "frames_manager.py:init_project_frames_default",
    "illinois-server.py:api_connect_camera",
    "mqtt_manager.py:_mqtt_worker",
    "illinois-server.py:load_juntas",
    "illinois-server.py:index",
    "illinois-server.py:api_aruco_config",
    "COMAU_variables.py:get_variable_commands",
    "illinois-server.py:shutdown_system",
    "COMAU_variables.py:create_control_execution_sequence",
    "COMAU.py:_get_start_program_sequence",
    "code_analyzer.py:_is_entry_point",
    "COMAU.py:verify_instr",
    "illinois-server.py:api_get_config",
    "COMAU_variables.py:create_execute_command_sequence",
    "illinois-server.py:initialize_yolo_models",
    "mqtt_manager.py:_on_connect",
    "mqtt_manager.py:_process_command_message",
    "COMAU_variables.py:get_variable",
    "COMAU.py:stop_program",
    "COMAU.py:_get_stop_program_sequence",
    "COMAU_variables.py:get_variable_registry",
    "code_analyzer.py:_generate_report",
    "COMAU_variables.py:create_set_multiple_variables_sequence",
    "COMAU.py:_get_move_to_home_sequence",
    "mqtt_manager.py:connect",
    "mqtt_manager.py:test_connection",
    "mqtt_manager.py:_on_message",
    "mqtt_manager.py:get_config",
    "COMAU.py:reset_robot"
  ],
  "cleanup_suggestions": {
    "safe_to_delete": [
      {
        "function_id": "camera_manager.py:is_connected",
        "reason": "Función huérfana sin dependencias",
        "file": "backup\\camera_manager.py",
        "lines": "423-426"
      },
      {
        "function_id": "aruco.py:get_available_dictionaries",
        "reason": "Función huérfana sin dependencias",
        "file": "lib\\aruco.py",
        "lines": "299-306"
      },
      {
        "function_id": "aruco.py:get_available_marker_sizes",
        "reason": "Función huérfana sin dependencias",
        "file": "lib\\aruco.py",
        "lines": "308-312"
      },
      {
        "function_id": "opencv_config.py:configure_opencv",
        "reason": "Función huérfana sin dependencias",
        "file": "src\\vision\\opencv_config.py",
        "lines": "5-9"
      }
    ],
    "cascade_deletion": [],
    "review_needed": [
      {
        "function_id": "contornos_analyzer.py:analizar_imagen_completa",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "str",
          "print_exc",
          "sqrt",
          "HuMoments",
          "arcLength",
          "contornos_analyzer.py:pixeles_a_mm",
          "flatten",
          "len",
          "float",
          "boundingRect",
          "findContours",
          "contornos_analyzer.py:encontrar_agujeros_extremos",
          "moments",
          "contourArea",
          "threshold",
          "print",
          "contornos_analyzer.py:calcular_angulo_orientacion",
          "contornos_analyzer.py:pixeles2_a_mm2",
          "sum",
          "enumerate",
          "fillPoly",
          "contornos_analyzer.py:analizar_agujeros",
          "zeros",
          "append"
        ],
        "file": "contornos_analyzer.py",
        "lines": "184-439"
      },
      {
        "function_id": "contornos_analyzer.py:crear_visualizacion",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "int",
          "full",
          "line",
          "drawContours",
          "circle",
          "fillPoly",
          "tuple",
          "get",
          "cvtColor",
          "print"
        ],
        "file": "contornos_analyzer.py",
        "lines": "442-512"
      },
      {
        "function_id": "elementos_utils.py:calcular_centros_muescas",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "range",
          "append",
          "round"
        ],
        "file": "elementos_utils.py",
        "lines": "16-47"
      },
      {
        "function_id": "elementos_utils.py:extraer_datos_elementos_form",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "int",
          "str",
          "elementos_utils.py:parse_bool",
          "strip",
          "elementos_utils.py:parse_float",
          "elementos_utils.py:parse_int",
          "get",
          "float"
        ],
        "file": "elementos_utils.py",
        "lines": "50-96"
      },
      {
        "function_id": "elementos_utils.py:extraer_datos_elementos_json",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "get"
        ],
        "file": "elementos_utils.py",
        "lines": "99-133"
      },
      {
        "function_id": "elementos_utils.py:obtener_datos_elementos_para_renderizar",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "elementos_utils.py:obtener_primera_muesca_desde_centros",
          "get",
          "elementos_utils.py:get_coord"
        ],
        "file": "elementos_utils.py",
        "lines": "152-220"
      },
      {
        "function_id": "muescas_renderer.py:dibujar_muescas",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "int",
          "circle",
          "range",
          "copy",
          "print"
        ],
        "file": "muescas_renderer.py",
        "lines": "13-90"
      },
      {
        "function_id": "muescas_renderer.py:calcular_punto_medio_segmento",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "int",
          "len",
          "get",
          "isinstance"
        ],
        "file": "muescas_renderer.py",
        "lines": "93-116"
      },
      {
        "function_id": "pipeline_analisis.py:analizar_con_reintentos",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "range",
          "pipeline_analisis.py:analizar_frame_completo",
          "get",
          "print"
        ],
        "file": "pipeline_analisis.py",
        "lines": "50-99"
      },
      {
        "function_id": "pipeline_analisis.py:aplicar_correccion_perspectiva_a_puntos",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "tolist",
          "reshape",
          "len",
          "perspectiveTransform",
          "array"
        ],
        "file": "pipeline_analisis.py",
        "lines": "985-1003"
      },
      {
        "function_id": "textos_renderer.py:dibujar_texto_simple",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "min",
          "int",
          "max",
          "getTextSize",
          "rotate",
          "zeros",
          "copy",
          "putText",
          "cvtColor",
          "print",
          "threshold"
        ],
        "file": "textos_renderer.py",
        "lines": "13-114"
      },
      {
        "function_id": "validaciones_geometricas.py:validar_todo",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "validaciones_geometricas.py:validar_centros_multiples",
          "validaciones_geometricas.py:validar_espaciado_uniforme",
          "load_config",
          "get",
          "print",
          "len",
          "validaciones_geometricas.py:validar_colinealidad"
        ],
        "file": "validaciones_geometricas.py",
        "lines": "36-97"
      },
      {
        "function_id": "visualizador.py:dibujar_todo",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "visualizador.py:_dibujar_linea_tool_muesca",
          "visualizador.py:_dibujar_muescas",
          "get",
          "load_config",
          "cvtColor",
          "print",
          "len",
          "visualizador.py:_dibujar_linea_referencia",
          "visualizador.py:_dibujar_agujeros",
          "visualizador.py:_dibujar_bbox_junta"
        ],
        "file": "visualizador.py",
        "lines": "47-152"
      },
      {
        "function_id": "visualizador.py:_dibujar_linea_offset",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "open",
          "int",
          "line",
          "sin",
          "degrees",
          "print_exc",
          "cos",
          "load",
          "get",
          "print",
          "array"
        ],
        "file": "visualizador.py",
        "lines": "286-357"
      },
      {
        "function_id": "camera_manager.py:_get_opencv_backends",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "startswith",
          "append",
          "hasattr"
        ],
        "file": "src\\vision\\camera_manager.py",
        "lines": "108-121"
      },
      {
        "function_id": "camera_manager.py:_try_open_camera",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "read",
          "release",
          "isOpened",
          "VideoCapture"
        ],
        "file": "src\\vision\\camera_manager.py",
        "lines": "123-139"
      },
      {
        "function_id": "camera_manager.py:scan_cameras",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "camera_manager.py:_get_windows_cameras",
          "len",
          "print"
        ],
        "file": "src\\vision\\camera_manager.py",
        "lines": "187-208"
      },
      {
        "function_id": "camera_manager.py:get_supported_resolutions",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "VideoCapture",
          "release",
          "int",
          "isOpened",
          "abs",
          "set",
          "get",
          "print",
          "camera_manager.py:_find_camera_index_by_vidpid",
          "append"
        ],
        "file": "src\\vision\\camera_manager.py",
        "lines": "213-259"
      },
      {
        "function_id": "camera_manager.py:_uid_to_index",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "scan_cameras"
        ],
        "file": "backup\\camera_manager.py",
        "lines": "300-306"
      },
      {
        "function_id": "camera_manager.py:get_frame",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "read",
          "str",
          "isOpened",
          "tobytes",
          "print",
          "imencode"
        ],
        "file": "src\\vision\\camera_manager.py",
        "lines": "326-352"
      },
      {
        "function_id": "camera_manager.py:capturar_frame_limpio",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "read",
          "isOpened",
          "print"
        ],
        "file": "backup\\camera_manager.py",
        "lines": "428-453"
      },
      {
        "function_id": "camera_manager.py:auto_connect_from_config",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "get",
          "connect_camera",
          "load_config",
          "print"
        ],
        "file": "backup\\camera_manager.py",
        "lines": "458-483"
      },
      {
        "function_id": "camera_manager.py:save_camera_config",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "print",
          "camera_manager.py:save_config",
          "camera_manager.py:load_config"
        ],
        "file": "src\\vision\\camera_manager.py",
        "lines": "413-430"
      },
      {
        "function_id": "aruco.py:detect_aruco_by_id",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "tolist",
          "int",
          "detectMarkers",
          "enumerate",
          "print_exc",
          "array",
          "getPredefinedDictionary",
          "aruco.py:get_dictionary_mapping",
          "norm",
          "flatten",
          "print",
          "mean",
          "float",
          "DetectorParameters",
          "ArucoDetector"
        ],
        "file": "lib\\aruco.py",
        "lines": "28-103"
      },
      {
        "function_id": "aruco.py:detect_all_arucos",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "tolist",
          "int",
          "detectMarkers",
          "enumerate",
          "aruco.py:get_dictionary_mapping",
          "getPredefinedDictionary",
          "norm",
          "flatten",
          "len",
          "print",
          "mean",
          "append",
          "float",
          "DetectorParameters",
          "ArucoDetector"
        ],
        "file": "lib\\aruco.py",
        "lines": "105-168"
      },
      {
        "function_id": "aruco.py:detect_arucos_with_config",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "tolist",
          "int",
          "detectMarkers",
          "enumerate",
          "str",
          "getPredefinedDictionary",
          "arctan2",
          "norm",
          "flatten",
          "get",
          "len",
          "print",
          "mean",
          "append",
          "float",
          "DetectorParameters",
          "ArucoDetector"
        ],
        "file": "lib\\aruco.py",
        "lines": "174-293"
      },
      {
        "function_id": "overlay.py:__init__",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "overlay.py:load_persistent_config",
          "print",
          "overlay.py:define_frame"
        ],
        "file": "lib\\overlay.py",
        "lines": "98-124"
      },
      {
        "function_id": "overlay.py:update_frame",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "ValueError",
          "print"
        ],
        "file": "lib\\overlay.py",
        "lines": "157-178"
      },
      {
        "function_id": "overlay.py:get_frame",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "ValueError"
        ],
        "file": "lib\\overlay.py",
        "lines": "180-184"
      },
      {
        "function_id": "overlay.py:list_frames",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "keys",
          "list"
        ],
        "file": "lib\\overlay.py",
        "lines": "186-188"
      },
      {
        "function_id": "overlay.py:add_line",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "overlay.py:_parse_color",
          "isinstance",
          "print",
          "DrawingObject",
          "ValueError"
        ],
        "file": "lib\\overlay.py",
        "lines": "288-332"
      },
      {
        "function_id": "overlay.py:add_circle",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "overlay.py:_parse_color",
          "isinstance",
          "print",
          "DrawingObject",
          "ValueError"
        ],
        "file": "lib\\overlay.py",
        "lines": "334-379"
      },
      {
        "function_id": "overlay.py:add_ellipse",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "overlay.py:_parse_color",
          "isinstance",
          "print",
          "DrawingObject",
          "ValueError"
        ],
        "file": "lib\\overlay.py",
        "lines": "381-425"
      },
      {
        "function_id": "overlay.py:add_segment",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "overlay.py:_parse_color",
          "isinstance",
          "print",
          "DrawingObject",
          "ValueError"
        ],
        "file": "lib\\overlay.py",
        "lines": "427-470"
      },
      {
        "function_id": "overlay.py:add_text",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "overlay.py:_parse_color",
          "isinstance",
          "print",
          "DrawingObject",
          "ValueError"
        ],
        "file": "lib\\overlay.py",
        "lines": "472-516"
      },
      {
        "function_id": "overlay.py:add_background",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "exists",
          "print",
          "imread",
          "ValueError",
          "FileNotFoundError"
        ],
        "file": "lib\\overlay.py",
        "lines": "518-528"
      },
      {
        "function_id": "overlay.py:set_background",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "copy",
          "ValueError",
          "print"
        ],
        "file": "lib\\overlay.py",
        "lines": "530-536"
      },
      {
        "function_id": "overlay.py:get_coordinates",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "overlay.py:get_object",
          "ValueError"
        ],
        "file": "lib\\overlay.py",
        "lines": "572-592"
      },
      {
        "function_id": "overlay.py:get_properties",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "copy",
          "ValueError"
        ],
        "file": "lib\\overlay.py",
        "lines": "594-599"
      },
      {
        "function_id": "overlay.py:get_object_original_frame",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "ValueError"
        ],
        "file": "lib\\overlay.py",
        "lines": "601-606"
      },
      {
        "function_id": "overlay.py:list_objects",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "keys",
          "list"
        ],
        "file": "lib\\overlay.py",
        "lines": "608-610"
      },
      {
        "function_id": "overlay.py:list_objects_by_original_frame",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "items"
        ],
        "file": "lib\\overlay.py",
        "lines": "612-614"
      },
      {
        "function_id": "overlay.py:create_renderlist",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "ValueError",
          "len",
          "print",
          "list"
        ],
        "file": "lib\\overlay.py",
        "lines": "620-646"
      },
      {
        "function_id": "overlay.py:list_renderlists",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "keys",
          "list"
        ],
        "file": "lib\\overlay.py",
        "lines": "655-657"
      },
      {
        "function_id": "overlay.py:render",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "overlay.py:_transform_coordinates",
          "overlay.py:_draw_object",
          "isinstance",
          "list",
          "keys",
          "copy",
          "len",
          "print",
          "overlay.py:get_renderlist"
        ],
        "file": "lib\\overlay.py",
        "lines": "663-709"
      },
      {
        "function_id": "overlay.py:save_config",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "open",
          "items",
          "print",
          "dump"
        ],
        "file": "lib\\overlay.py",
        "lines": "769-791"
      },
      {
        "function_id": "overlay.py:save_persistent_config",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "open",
          "items",
          "print",
          "dump"
        ],
        "file": "lib\\overlay.py",
        "lines": "793-812"
      },
      {
        "function_id": "overlay.py:add_polygon",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "overlay.py:_parse_color",
          "isinstance",
          "print",
          "DrawingObject",
          "ValueError"
        ],
        "file": "lib\\overlay.py",
        "lines": "862-903"
      },
      {
        "function_id": "aruco_manager.py:save_aruco_configuration",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "startswith",
          "aruco_manager.py:is_frame_detected",
          "items",
          "aruco_manager.py:create_aruco_overlay_objects",
          "extend",
          "aruco_manager.py:is_tool_detected",
          "aruco_manager.py:create_center_reference",
          "get",
          "len",
          "print",
          "aruco_manager.py:create_temp_frames_from_arucos",
          "append",
          "aruco_manager.py:detect_arucos_in_image"
        ],
        "file": "src\\vision\\aruco_manager.py",
        "lines": "298-364"
      },
      {
        "function_id": "aruco_manager.py:get_frame_aruco_info",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "get"
        ],
        "file": "src\\vision\\aruco_manager.py",
        "lines": "370-374"
      },
      {
        "function_id": "aruco_manager.py:get_tool_aruco_info",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "get"
        ],
        "file": "src\\vision\\aruco_manager.py",
        "lines": "376-380"
      },
      {
        "function_id": "aruco_manager.py:render_overlay_with_arucos",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "str",
          "aruco_manager.py:clear_aruco_objects",
          "aruco_manager.py:is_tool_detected",
          "aruco_manager.py:create_renderlist",
          "aruco_manager.py:create_temp_frames_from_arucos",
          "print",
          "startswith",
          "aruco_manager.py:is_frame_detected",
          "items",
          "aruco_manager.py:create_aruco_overlay_objects",
          "extend",
          "aruco_manager.py:create_center_reference",
          "append",
          "aruco_manager.py:detect_arucos_in_image"
        ],
        "file": "src\\vision\\aruco_manager.py",
        "lines": "402-480"
      },
      {
        "function_id": "camera_manager.py:get_frame_raw",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "read",
          "isOpened",
          "str",
          "print"
        ],
        "file": "src\\vision\\camera_manager.py",
        "lines": "354-376"
      },
      {
        "function_id": "camera_manager.py:connectToCamera",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "camera_manager.py:load_config",
          "camera_manager.py:connect_camera",
          "get",
          "print"
        ],
        "file": "src\\vision\\camera_manager.py",
        "lines": "381-411"
      },
      {
        "function_id": "yolo_detector.py:load_model",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "print_exc",
          "to",
          "is_available",
          "exists",
          "print",
          "YOLO"
        ],
        "file": "src\\vision\\yolo_detector.py",
        "lines": "40-93"
      },
      {
        "function_id": "yolo_detector.py:is_model_loaded",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "get"
        ],
        "file": "src\\vision\\yolo_detector.py",
        "lines": "95-97"
      },
      {
        "function_id": "yolo_detector.py:get_model_path",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "get"
        ],
        "file": "src\\vision\\yolo_detector.py",
        "lines": "99-101"
      },
      {
        "function_id": "yolo_detector.py:detect_gasket",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "min",
          "int",
          "max",
          "tolist",
          "degrees",
          "cpu",
          "numpy",
          "int0",
          "boxPoints",
          "len",
          "print",
          "hasattr",
          "float",
          "map"
        ],
        "file": "src\\vision\\yolo_detector.py",
        "lines": "113-198"
      },
      {
        "function_id": "yolo_detector.py:detect_gasket_with_mask",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "astype",
          "cpu",
          "zeros",
          "numpy",
          "len",
          "print",
          "hasattr",
          "map",
          "resize"
        ],
        "file": "src\\vision\\yolo_detector.py",
        "lines": "201-253"
      },
      {
        "function_id": "yolo_detector.py:detect_holes",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "int",
          "max",
          "astype",
          "cpu",
          "findContours",
          "moments",
          "numpy",
          "print",
          "append",
          "resize"
        ],
        "file": "src\\vision\\yolo_detector.py",
        "lines": "258-315"
      },
      {
        "function_id": "yolo_detector.py:detect_holes_bboxes",
        "reason": "Función huérfana con dependencias internas",
        "calls": [
          "cpu",
          "numpy",
          "len",
          "print",
          "hasattr",
          "append",
          "map"
        ],
        "file": "src\\vision\\yolo_detector.py",
        "lines": "320-376"
      }
    ]
  }
}